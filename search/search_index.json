{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#_1","title":"\u6210\u957f\u8ba1\u5212","text":"<p>\u5f00\u59cb</p>"},{"location":"cpp-base/","title":"C++ \u57fa\u7840","text":""},{"location":"cpp-base/#1stringmain","title":"1\u3001\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684String\u7c7b\uff0c\u4fdd\u8bc1main\u51fd\u6570\u5bf9\u6b63\u786e\u6267\u884c","text":"<pre><code>class String\n{\npublic:\n    String();\n    String(const char *pstr);\n    String(const String &amp; rhs);\n    String &amp; operator=(const String &amp; rhs);\n    ~String();\n\n    void print();\n\nprivate:\n    char * _pstr;\n};\n\nint main(void)\n{\n    String str1;\n    str1.print();\n\n    String str2 = \"Hello,world\";\n    String str3(\"wangdao\");\n\n    str2.print();       \n    str3.print();   \n\n    String str4 = str3;\n    str4.print();\n\n    str4 = str2;\n    str4.print();\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp-base/#2","title":"2\u3001\u7f16\u5199\u4e00\u4e2a\u7c7b\uff0c\u5b9e\u73b0\u7b80\u5355\u7684\u6808\u3002\u6808\u4e2d\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a","text":"<pre><code>\u5143\u7d20\u5165\u6808     void push(int);\n\u5143\u7d20\u51fa\u6808     void pop();\n\u8bfb\u51fa\u6808\u9876\u5143\u7d20 int top();\n\u5224\u65ad\u6808\u7a7a     bool emty();\n\u5224\u65ad\u6808\u6ee1     bool full();\n\u5982\u679c\u6808\u6ea2\u51fa\uff0c\u7a0b\u5e8f\u7ec8\u6b62\u3002\u6808\u7684\u6570\u636e\u6210\u5458\u7531\u5b58\u653e\n10\u4e2a\u6574\u578b\u6570\u636e\u7684\u6570\u7ec4\u6784\u6210\u3002\u5148\u540e\u505a\u5982\u4e0b\u64cd\u4f5c\uff1a\n\u521b\u5efa\u6808\n\u5c0610\u5165\u6808\n\u5c0612\u5165\u6808\n\u5c0614\u5165\u6808\n\u8bfb\u51fa\u5e76\u8f93\u51fa\u6808\u9876\u5143\u7d20\n\u51fa\u6808\n\u8bfb\u51fa\u5e76\u8f93\u51fa\u6808\u9876\u5143\u7d20\n</code></pre>"},{"location":"cpp-base/#3","title":"3\u3001\u7f16\u5199\u4e00\u4e2a\u7c7b\uff0c\u5b9e\u73b0\u7b80\u5355\u7684\u961f\u5217\u3002\u961f\u5217\u4e2d\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a","text":"<pre><code>\u5143\u7d20\u5165\u961f            void push(int);\n\u5143\u7d20\u51fa\u961f            void pop();\n\u8bfb\u53d6\u961f\u5934\u5143\u7d20         int front();\n\u8bfb\u53d6\u961f\u5c3e\u5143\u7d20         int back();\n\u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a     bool emty();\n\u5224\u65ad\u961f\u5217\u662f\u5426\u5df2\u6ee1     bool full();\n</code></pre>"},{"location":"cpp-base/#5-the_holy_bibletxt","title":"5. \u7edf\u8ba1\u4e00\u7bc7\u82f1\u6587(The_Holy_Bible.txt)\u6587\u7ae0\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u548c\u8bcd\u9891","text":"<pre><code>\u8f93\u5165\uff1a\u67d0\u7bc7\u6587\u7ae0\u7684\u7edd\u5bf9\u8def\u5f84\n\u8f93\u51fa\uff1a\u8bcd\u5178\uff08\u8bcd\u5178\u4e2d\u7684\u5185\u5bb9\u4e3a\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u201c\u5355\u8bcd \u8bcd\u9891\u201d\uff09\n\n\u8bcd\u5178\u7684\u5b58\u50a8\u683c\u5f0f\u5982\u4e0b\n-----------------\n|   a 66          |\n|   abandon 77    |\n|   public 88     |\n|    ......       |\n|_________________|\n\nstruct Record\n{\n    string _word;\n    int _frequency;\n};\n\nclass Dictionary\n{\npublic:\n    //......\n    void read(const std::string &amp;filename);\n    void store(const std::string &amp;filename);\nprivate:\n    vector&lt;Record&gt; _dict;\n};\n</code></pre>"},{"location":"cpp-base/#6-log4cpp","title":"6. \u5c01\u88c5log4cpp,\u4f7f\u7528\u8d77\u6765\u6bd4\u8f83\u65b9\u4fbf\uff0c\u5982\u4e0b\u6240\u793a","text":"<pre><code>\u8f93\u51fa\u7684\u65e5\u5fd7\u4fe1\u606f\u80fd\u540c\u65f6\u8f93\u51fa\u5230\u7ec8\u7aef\u548c\u6587\u4ef6\n\nint main(void)\n{\n    cout &lt;&lt; \"hello,world\"&lt;&lt;endl;\n\n    logInfo(\"Message\"); //\u6216\u8005   \n    logError(\"Message\");\n    logWarn(\"Message\");\n    logDebug(\"Message\");\n}\n\n\u52a0\u5206\u9879\uff1a\u8f93\u51fa\u7684\u65e5\u5fd7\u4fe1\u606f\u4e2d\u6700\u597d\u80fd\u6709\u6587\u4ef6\u7684\u540d\u5b57\uff0c\u51fd\u6570\u7684\u540d\u5b57\u53ca\u5176\u6240\u5728\u7684\u884c\u53f7\n\n//\u4f7f\u7528\u5355\u4f8b\u6a21\u5f0f\nclass Mylogger\n{\npublic:\n    void warn(const char * msg);\n    void error(const char * msg);\n    void debug(const char * msg);\n    void info(const char * msg);\nprivate:\n    Mylogger();\n    ~Mylogger();\nprivate:\n    //......\n};\n\nMylogger * log = Mylogger::getInstance();\nlog-&gt;warn(\"hello\");\n</code></pre>"},{"location":"cpp-base/#7string","title":"7\u3001\u5b9e\u73b0String\u7c7b\u7684\u5176\u5b83\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d","text":"<pre><code>class String \n{\npublic:\n    String();\n    String(const char *);\n    String(const String&amp;);\n    ~String();\n    String &amp;operator=(const String &amp;);\n    String &amp;operator=(const char *);\n\n    String &amp;operator+=(const String &amp;);\n    String &amp;operator+=(const char *);\n\n    char &amp;operator[](std::size_t index);\n    const char &amp;operator[](std::size_t index) const;\n\n    std::size_t size() const;\n    const char* c_str() const;\n\n    friend bool operator==(const String &amp;, const String &amp;);\n    friend bool operator!=(const String &amp;, const String &amp;);\n\n    friend bool operator&lt;(const String &amp;, const String &amp;);\n    friend bool operator&gt;(const String &amp;, const String &amp;);\n    friend bool operator&lt;=(const String &amp;, const String &amp;);\n    friend bool operator&gt;=(const String &amp;, const String &amp;);\n\n    friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const String &amp;s);\n    friend std::istream &amp;operator&gt;&gt;(std::istream &amp;is, String &amp;s);\n\nprivate:\n    char * _pstr;\n};\n\nString operator+(const String &amp;, const String &amp;);\nString operator+(const String &amp;, const char *);\nString operator+(const char *, const String &amp;);\n</code></pre>"},{"location":"cpp-base/#8-cowstringoperator","title":"8. \u5b9e\u73b0COW\u7684String\uff0c\u8ba9\u5176operator[]\u80fd\u591f\u533a\u5206\u51fa\u8bfb\u5199\u64cd\u4f5c","text":""},{"location":"cpp-base/#9tinyxml2rsspagelibdat","title":"9.\u4f7f\u7528tinyXml2\u89e3\u6790RSS\u6587\u4ef6\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u7f51\u9875\u5e93pagelib.dat","text":"<p>tinyXml2 -- https://github.com/leethomason/tinyxml2</p> <p>rss      --   https://coolshell.cn/feed</p> <p>--   http://www.runoob.com/rss/rss-tutorial.html</p> <pre><code>\u6b63\u5219\u8868\u8fbe\u5f0f \u8fdb\u884c\u8fc7\u6ee4\n\u53c2\u8003\u63a5\u53e3:   \nstruct RssItem\n{\n    string title;\n    string link;\n    string description;\n    string content;\n};\n\nclass RssReader\n{\npublic:\n    RssReader();\n    void parseRss();//\u89e3\u6790\n    void dump(const string &amp; filename);//\u8f93\u51fa\nprivate:\n    vector&lt;RssItem&gt; _rss;\n};   \n\n\u8981\u6c42\uff1a\u6700\u540e\u751f\u6210\u4e00\u4e2a pagelib.txt, \u5176\u683c\u5f0f:\n</code></pre> <pre><code>    &lt;doc&gt;\n      &lt;docid&gt;1&lt;/docid&gt;\n      &lt;title&gt; ... &lt;/title&gt;\n      &lt;link&gt; ...  &lt;/link&gt;\n      &lt;content&gt; ... &lt;/content&gt;\n    &lt;/doc&gt;\n    &lt;doc&gt;\n      ...\n    &lt;/doc&gt;\n    &lt;doc&gt;\n      ...\n    &lt;/doc&gt;\n</code></pre> <pre><code>RSS\u6587\u4ef6\u89e3\u6790\u4f5c\u4e1a\u601d\u8def\uff1a                 \nxml --&gt;  rss --&gt; tinyxml2 --&gt; boost::regex/std::regex\n</code></pre>"},{"location":"cpp-base/#10-map","title":"10. \u8bcd\u9891\u7edf\u8ba1\u7684\u4f5c\u4e1a\u518d\u7528map\u5bb9\u5668\u53bb\u5b9e\u73b0\u4e00\u6b21","text":"<p>\u4f53\u9a8c\u4e00\u4e0b\u4f7f\u7528vector/map\u65f6\u7a0b\u5e8f\u6267\u884c\u7684\u901f\u5ea6++dict[word];</p>"},{"location":"cpp-base/#11","title":"11. \u6587\u672c\u67e5\u8be2","text":"<pre><code>\u8be5\u7a0b\u5e8f\u5c06\u8bfb\u53d6\u7528\u6237\u6307\u5b9a\u7684\u4efb\u610f\u6587\u672c\u6587\u4ef6\u3010\u5f53\u524d\u76ee\u5f55\u4e0b\u7684china_daily.txt\u3011\uff0c\n\u7136\u540e\u5141\u8bb8\u7528\u6237\u4ece\u8be5\u6587\u4ef6\u4e2d\u67e5\u627e\u5355\u8bcd\u3002\u67e5\u8be2\u7684\u7ed3\u679c\u662f\u8be5\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e76\u5217\n\u51fa\u6bcf\u6b21\u51fa\u73b0\u6240\u5728\u7684\u884c\u3002\u5982\u679c\u67d0\u5355\u8bcd\u5728\u540c\u4e00\u884c\u4e2d\u591a\u6b21\u51fa\u73b0\uff0c\u7a0b\u5e8f\u5c06\u53ea\u663e\u793a\u8be5\u884c\n\u4e00\u6b21\u3002\u884c\u53f7\u6309\u5347\u5e8f\u663e\u793a\u3002\n\n\u8981\u6c42\uff1a\na. \u5b83\u5fc5\u987b\u5141\u8bb8\u7528\u6237\u6307\u660e\u8981\u5904\u7406\u7684\u6587\u4ef6\u540d\u5b57\u3002\n\nb. \u7a0b\u5e8f\u5c06\u5b58\u50a8\u8be5\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4ee5\u4fbf\u8f93\u51fa\u6bcf\u4e2a\u5355\u8bcd\u6240\u5728\u7684\u539f\u59cb\u884c\u3002\nvector&lt;string&gt; lines;//O(1) \n\nc. \u5b83\u5fc5\u987b\u5c06\u6bcf\u4e00\u884c\u5206\u89e3\u4e3a\u5404\u4e2a\u5355\u8bcd\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u5355\u8bcd\u6240\u5728\u7684\u6240\u6709\u884c\u3002 \n\u5728\u8f93\u51fa\u884c\u53f7\u65f6\uff0c\u5e94\u4fdd\u8bc1\u4ee5\u5347\u5e8f\u8f93\u51fa\uff0c\u5e76\u4e14\u4e0d\u91cd\u590d\u3002 \n\nmap&lt;string, set&lt;int&gt; &gt; wordNumbers;\nmap&lt;string, int&gt; dict;\n\nd. \u5bf9\u7279\u5b9a\u5355\u8bcd\u7684\u67e5\u8be2\u5c06\u8fd4\u56de\u51fa\u73b0\u8be5\u5355\u8bcd\u7684\u6240\u6709\u884c\u7684\u884c\u53f7\u3002\n\ne. \u8f93\u51fa\u67d0\u5355\u8bcd\u6240\u5728\u7684\u884c\u6587\u672c\u65f6\uff0c\u7a0b\u5e8f\u5fc5\u987b\u80fd\u6839\u636e\u7ed9\u5b9a\u7684\u884c\u53f7\u4ece\u8f93\u5165\n\u6587\u4ef6\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684\u884c\u3002\n\n\u793a\u4f8b\uff1a\n\u4f7f\u7528\u63d0\u4f9b\u7684\u6587\u4ef6\u5185\u5bb9\uff0c\u7136\u540e\u67e5\u627e\u5355\u8bcd \"element\"\u3002\u8f93\u51fa\u7684\u524d\u51e0\u884c\u4e3a:\n---------------------------------------------\nelement occurs 125 times.\n(line 62) element with a given key.\n(line 64) second element with the same key.\n(line 153) element |==| operator.\n(line 250) the element type.\n(line 398) corresponding element.\n---------------------------------------------   \n\n\u7a0b\u5e8f\u63a5\u53e3[\u53ef\u9009]:\nclass TextQuery\n{\npublic:\n    //......\n    void readFile(const string filename);\n    //void query(const string &amp; word);//\u67e5\u8be2\u548c\u6253\u5370\u8026\u5408\u5728\u4e00\u8d77\u4e86\n    QueryResult query(const string &amp; word);\nprivate:\n    //......\n    vector&lt;string&gt; _lines;//O(1) \n    map&lt;string, set&lt;int&gt; &gt; _wordNumbers;\n    map&lt;string, int&gt; _dict;//\n};\n\nvoid print(ostream &amp; os, const QueryResult &amp;);\n\n//\u7a0b\u5e8f\u6d4b\u8bd5\u7528\u4f8b\nint main(int argc, char *argv[])\n{\n    string  queryWord(\"hello\");\n\n    TextQuery tq;\n    tq.readFile(\"test.dat\");\n    tq.query(queryWord);               \n    return 0;\n} \n</code></pre>"},{"location":"cpp-base/#12-3750","title":"12. \u4e24\u4e2a\u4f5c\u4e1a\uff1a\u6587\u672c\u67e5\u8be2\u6269\u5c55(\u5fc5\u505a)\u4e0e\u9b54\u517d\u4e16\u754c3750(\u9009\u505a)","text":"<p>12\u3001(\u5fc5\u505a)\u5b8c\u6210C++ primer(\u7b2c5\u7248)\u4e2d\u768415.9\u8282\u7684\u6587\u672c\u67e5\u8be2\u7a0b\u5e8f\u6269\u5c55</p> <p>\u5373\u4f7f\u4e0d\u81ea\u5df1\u5b9e\u73b0,\u6700\u597d\u4e5f\u8981\u7167\u7740\u4e66\u6572\u4e00\u904d\u4ee3\u7801, \u5728\u673a\u5668\u4e0a\u8ba9\u7a0b\u5e8f\u8dd1\u8d77\u6765.</p> <p>12.1\u3001(\u9009\u505a)\u9b54\u517d\u4e16\u754c3750: http://bailian.openjudge.cn/practice/3750/</p>"},{"location":"cpp-base/#13day133","title":"13\u3001\u5c06day13\u4f5c\u4e1a\u4e2d\u7684\u7f16\u7a0b\u9898\u7b2c3\u9898\uff08\u6587\u672c\u67e5\u8be2\u4f5c\u4e1a\uff09\u7528\u667a\u80fd\u6307\u9488\u7684\u65b9\u5f0f\u518d\u5b9e\u73b0\u4e00\u904d\uff0c","text":"<p>\u53ef\u4ee5\u53c2\u8003C++ Primer \u7b2c5\u7248\u7b2c12\u7ae03\u5c0f\u8282\uff0812.3\uff09\u7684\u5b9e\u73b0</p>"},{"location":"cpp-base/#14","title":"14. \u5b9e\u73b0\u4e00\u4e2a\u6a21\u677f\u5f62\u5f0f\u7684\u5355\u4f8b\u7c7b","text":"<p>\u8981\u6c42\u5bf9\u4e8e\u4efb\u610f\u7c7b\u578b\u7684\u7c7b\u7ecf\u8fc7Singleton\u7684\u5904\u7406\u4e4b\u540e\uff0c\u90fd\u80fd\u83b7\u53d6\u4e00\u4e2a\u5355\u4f8b\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u53c2\u6570</p> <pre><code>class Point;\nclass Computer;\n\nPoint pt(1, 2);\nPoint pt2(3, 4);\n\nComputer com(\"Mac\", 8888);\n\n\nint main(void)\n{\n    Computer * p1 = Singleton&lt;Computer&gt;::getInstance(\"Xiaomi\", 6666);\n    Computer * p2 = Singleton&lt;Computer&gt;::getInstance(\"Xiaomi\", 6666);\n\n    Point\u3000* p3 = Singleton&lt;Point&gt;::getInstance(1, 2);\n    Point\u3000* p4 = Singleton&lt;Point&gt;::getInstance(1, 2);\n\n    Point3D\u3000* p5 = Singleton&lt;Point&gt;::getInstance(1, 2, 3);\n\n    return 0;\n} \n</code></pre>"},{"location":"cpp-base/#15-log4cppprintf","title":"15. \u5b9e\u73b0log4cpp\u7684\u5c01\u88c5\uff0c\u4f7f\u5176\u53ef\u4ee5\u50cfprintf\u4e00\u6837\u4f7f\u7528","text":"<p>\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b:</p> <pre><code>void test() {\n    int number = 100;\n    const char * pstr = \"hello, log4cpp\";\n    LogError(\"this is an info message. number = %d, str = %s\\n\", number, pstr);\n}\n</code></pre>"},{"location":"cpp-base/#16-leetcode-20leetcodeword","title":"16. Leetcode 20\u9898\uff08\u89c1leetcode\u6216word\u6587\u6863\uff09\u672a\u5b9e\u73b0","text":""},{"location":"cpp-base/#17-leetcode-127leetcodeword","title":"17. Leetcode 127\u9898\uff08\u89c1leetcode\u6216word\u6587\u6863\uff09\u672a\u5b9e\u73b0","text":""},{"location":"cpp-base/#18","title":"18. \u4f7f\u7528\u6a21\u677f\u5b9e\u73b0\u4e00\u4e2a\u5806\u6392\u5e8f\u7b97\u6cd5   \u672a\u5b9e\u73b0","text":"<p>\u4f7f\u7528\u6a21\u677f\u7684\u6846\u67b6\u5982\u4e0b\uff1a</p> <pre><code>template &lt;typename T, typename Compare = std::less&lt;T&gt; &gt;\nclass HeapSort\n{\npublic:\n    HeapSort(T * arr, int size);        \n    void heapAdjust();\n    void sort();\nprivate:\n    //...\n};\n</code></pre>"},{"location":"cpp-base/#19","title":"19. \u4f7f\u7528\u6a21\u677f\u5b9e\u73b0\u4e00\u4e2a\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5","text":""},{"location":"cpp-base/#20-leetcode-146-lurcacheleetcodeword","title":"20. Leetcode 146 LURCache\u7684\u5b9e\u73b0\uff08\u89c1leetcode\u6216word\u6587\u6863\uff09","text":""},{"location":"cpp-base/#21unordered_mapmap","title":"21.\u4f7f\u7528unordered_map/map\u5b9e\u73b0\u5355\u8bcd\u8f6c\u6362\u7a0b\u5e8f\u3002","text":"<p>\u7ed9\u5b9a\u4e00\u4e2astring\uff0c\u5c06\u5b83\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2astring\u3002\u7a0b\u5e8f\u7684\u8f93\u5165\u662f\u4e24\u4e2a\u6587\u4ef6\uff0c\u7b2c\u4e00\u4e2a\u6587\u4ef6\u4fdd\u5b58\u7684\u662f\u4e00\u4e9b\u89c4\u5219\uff0c\u7528\u6765\u8f6c\u6362\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u4e2d\u7684\u6587\u672c\u3002\u6bcf\u6761\u89c4\u5219\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u4e00\u4e2a\u53ef\u80fd\u51fa\u73b0\u5728\u8f93\u5165\u6587\u4ef6\u4e2d\u7684\u5355\u8bcd\u548c\u4e00\u4e2a\u7528\u6765\u66ff\u6362\u5b83\u7684\u77ed\u8bed\u3002\u8868\u8fbe\u7684\u542b\u4e49\u662f\uff0c\u6bcf\u5f53\u7b2c\u4e00\u4e2a\u5355\u8bcd\u51fa\u73b0\u5728\u8f93\u5165\u4e2d\u65f6\uff0c\u6211\u4eec\u5c31\u5c06\u5b83\u66ff\u6362\u4e3a\u5bf9\u5e94\u7684\u77ed\u8bed\uff0c\u7b2c\u4e8c\u4e2a\u8f93\u5165\u6587\u4ef6\u5305\u542b\u8981\u8f6c\u6362\u7684\u6587\u672c\u3002\uff08C++ primer 11.3.6\uff09</p> <p>\u63d0\u793a\uff1a \u89c4\u5219\u6587\u4ef6\uff1amap.txt\u6587\u4ef6\uff0c\u5176\u5b9e\u5c31\u662f\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff0c\u88ab\u540e\u9762\u7684\u4e00\u4e32\u6240\u66ff\u6362\u3002 \u5f85\u8f6c\u6362\u6587\u672c\uff1afile.txt\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u4e2d\u7684\u5355\u8bcd\u5982\u679c\u51fa\u73b0\u5728map.txt\u6587\u4ef6\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7684\u8bdd\uff0c\u5c31\u7528map.txt\u7684\u540e\u9762\u4e00\u4e32\u66ff\u4ee3\u3002</p> <p>\u7ed3\u679c\uff1a\u6700\u540e\u7ed3\u679c\u5176\u5b9e\u5c31\u662f\uff0c\u5c06file.txt\u6587\u4ef6\u4e2d\u7684\u5e76\u4e14\u51fa\u73b0\u5728map.txt\u4e2d\u7b2c\u4e00\u4e2a\u5355\u8bcd\u8f6c\u6362\u4e3amap.txt\u540e\u9762\u7684\u4e00\u4e32\u3002\u4f8b\u5982\uff1awhere r u\u7684\u8f93\u51fa\u7ed3\u679c\u5c31\u662fwhere are you.   r\u66ff\u6362\u4e3aare\uff0cu\u66ff\u6362\u4e3ayou</p> <pre><code>//file.txt\nwhere r u\ny dont u send me a pic\nk thk l8r\n\n//map.txt\nbrb be right back\nk okay?\ny why\nr are\nu you\npic picture\nthk thanks!\nl8r later \n</code></pre>"},{"location":"cpp-base/#22-stdallocatorvector","title":"22. \u4e86\u89e3std::allocator\u7684\u7528\u6cd5\u4e4b\u540e,\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684Vector\u7c7b","text":"<p>\u63a5\u53e3\u5f62\u5f0f\uff1a</p> <pre><code>template&lt;typename T&gt;\nclass Vector\n{\npublic:\n    Vector();\n    ~Vector();\n\n    void push_back(const T &amp;); \n    void pop_back();    \n\n    int size();\n    int capacity();\nprivate:\n    void reallocate();//\u91cd\u65b0\u5206\u914d\u5185\u5b58,\u52a8\u6001\u6269\u5bb9\u8981\u7528\u7684\nprivate:    \n    static std::allocator&lt;T&gt; _alloc;\n\n    T * _start;      //\u6307\u5411\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    T * _finish; //\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5b9e\u9645\u5143\u7d20\u4e4b\u540e\u7684\u90a3\u4e2a\u5143\u7d20\n    T * _end_of_storage;        //\u6307\u5411\u6570\u7ec4\u672c\u8eab\u4e4b\u540e\u7684\u4f4d\u7f6e\n};\n</code></pre> <pre><code>Vector\u6a21\u578b\n______________________________\n|_|_|_|_|_|____________________|\n\u2191         \u2191                    \u2191\n_start   _finish            _end_of_storage\n</code></pre>"},{"location":"cpp-base/#_1","title":"\u7f16\u7a0b\u9898\u7b54\u6848","text":""},{"location":"cpp-base/#1string","title":"1\u3001String\u7684\u5b9e\u73b0","text":"<pre><code>/* String.cc */\n#include &lt;string.h&gt;\n#include &lt;iostream&gt;\n\nusing std::cout;\nusing std::endl;\n\n//\u9762\u8bd5\u7684\u9898\u76ee\nclass String\n{\npublic:\n    String()\n    : _pstr(nullptr)\n    {\n        cout &lt;&lt; \"String()\" &lt;&lt; endl;\n    }\n    String(const char *pstr)\n    : _pstr(new char[strlen(pstr) + 1]())\n    {\n        cout &lt;&lt; \"String(const char *)\" &lt;&lt; endl;\n        strcpy(_pstr, pstr);\n    }\n\n    String(const String &amp; rhs)\n    : _pstr(new char[strlen(rhs._pstr) + 1]())\n    {\n        cout &lt;&lt; \"String(const String &amp;)\" &lt;&lt; endl;\n        strcpy(_pstr, rhs._pstr);\n    }\n\n    String &amp; operator=(const String &amp; rhs)\n    {\n        cout &lt;&lt; \"String &amp;operator=(const String &amp;)\" &lt;&lt; endl;\n        //1\u3001\u81ea\u590d\u5236\n        if(this != &amp;rhs)\n        {\n            //2\u3001\u91ca\u653e\u5de6\u64cd\u4f5c\u6570\n            if(_pstr)\n            {\n                delete [] _pstr;\n                _pstr = nullptr;\n            }\n\n            //3\u3001\u6df1\u62f7\u8d1d\n            /* if(rhs._pstr) */\n            _pstr = new char[strlen(rhs._pstr) + 1]();\n            strcpy(_pstr, rhs._pstr);\n        }\n        //4\u3001\u8fd4\u56de*this\n        return *this;\n    }\n\n    size_t length() const\n    {\n        size_t len = 0;\n        if(_pstr)\n        {\n            len = strlen(_pstr);\n        }\n\n        return len;\n\n    }\n\n    const char * c_str() const\n    {\n        if(_pstr)\n        {\n            return _pstr;\n        }\n        else\n        {\n            return nullptr;\n        }\n    }\n\n\n    ~String()\n    {\n        cout &lt;&lt; \"~String()\" &lt;&lt; endl;\n        if(_pstr)\n        {\n            delete [] _pstr;\n            _pstr = nullptr;\n        }\n    }\n\n    void print() const\n    {\n        if(_pstr)\n        {\n            cout &lt;&lt; \"_pstr = \" &lt;&lt; _pstr &lt;&lt; endl;\n        }\n    }\n\nprivate:\n    char * _pstr;\n};\n\nint main(void)\n{\n    String str1;\n    str1.print();\n\n    cout &lt;&lt; endl &lt;&lt; endl;\n    //C++         C,\"Hello,world\"===&gt;String(\"Hello,world\")\n    String str2 = \"Hello,world\";\n    String str3(\"wangdao\");\n\n    str2.print();       \n    str3.print();   \n\n    cout &lt;&lt; endl &lt;&lt; endl;\n    String str4 = str3;\n    str4.print();\n\n    cout &lt;&lt; endl &lt;&lt; endl;\n    str4 = str2;\n    str4.print();\n\n    //\u4eceC++\u98ce\u683c\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aC\u98ce\u683c\u5b57\u7b26\u4e32\n    const char *pstr = str3.c_str();\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp-base/#2_1","title":"2\u3001\u6808\u7684\u5b9e\u73b0","text":"<pre><code>#include &lt;iostream&gt;\n\nusing std::cout;\nusing std::endl;\n\nclass Stack\n{\npublic:\n    Stack(int size = 10)\n    : _size(size)\n    , _top(-1)\n    , _data(new int[_size]())\n    {\n        cout &lt;&lt; \"Stack(int  = 10)\" &lt;&lt; endl;\n    }\n\n    ~Stack()\n    {\n        cout &lt;&lt; \"~Satck()\" &lt;&lt; endl;\n        if(_data)\n        {\n            delete [] _data;\n            _data = nullptr;\n        }\n    }\n\n    bool full() const\n    {\n#if 0\n        if(_top == _size - 1)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n#endif\n\n        return (_top == _size - 1);\n    }\n\n    bool empty() const\n    {\n        return (-1 == _top);\n        /* return ( _top = -1); */\n    }\n\n    void push(const int &amp;value)\n    {\n        if(!full())\n        {\n            _data[++_top] = value;\n        }\n        else\n        {\n            cout &lt;&lt; \"The stack is full\" &lt;&lt; endl;\n            return;\n        }\n    }\n    void pop()\n    {\n        if(!empty())\n        {\n            --_top;\n        }\n        else\n        {\n            cout &lt;&lt; \"The stack is empty\" &lt;&lt; endl;\n            return;\n        }\n    }\n    int top() const\n    {\n        return _data[_top];\n    }\nprivate:\n    int _size;\n    int _top;\n    int *_data;\n};\n\nint main(int argc, char **argv)\n{\n    Stack st(12);\n    cout &lt;&lt; \"\u6808\u662f\u4e0d\u662f\u7a7a\u7684\uff1f\" &lt;&lt; st.empty() &lt;&lt; endl;\n    st.push(1);\n    cout &lt;&lt; \"\u6808\u662f\u4e0d\u662f\u6ee1\u7684\uff1f\" &lt;&lt; st.full() &lt;&lt; endl;\n\n    for(int idx = 2; idx != 15; ++idx)\n    {\n        st.push(idx);\n    }\n\n    while(!st.empty())\n    {\n        cout &lt;&lt; st.top() &lt;&lt; endl;\n        st.pop();\n    }\n    cout &lt;&lt; \"\u6808\u662f\u4e0d\u662f\u7a7a\u7684\uff1f\" &lt;&lt; st.empty() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"cpp-base/#5vector","title":"5\u3001\u8bcd\u9891\u7edf\u8ba1vector","text":"<pre><code>/* dictVector.cc */\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n\nusing std::cout;\nusing std::endl;\nusing std::cerr;\nusing std::string;\nusing std::vector;\nusing std::ifstream;\nusing std::ofstream;\nusing std::istringstream;\n\nstruct Record\n{\n    Record(const string &amp;word, int frequency)\n    : _word(word)\n    , _frequency(frequency)\n    {\n\n    }\n    string _word;\n    int _frequency;\n};\n\nclass Dictionary\n{\npublic:\n    Dictionary(int capa)\n    {\n        _dict.reserve(capa);//\u9884\u7559\u7a7a\u95f4\n    }\n\n    void read(const string &amp;filename)\n    {\n        ifstream ifs(filename);\n        if(!ifs.good())\n        {\n            cerr &lt;&lt; \"open \" &lt;&lt; filename &lt;&lt; \" error\" &lt;&lt; endl;\n            return;\n        }\n        //\u8bfbfilename\u8fd9\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u4e2a\u5355\u8bcd\u505a\u5904\u7406\n        string line;\n        while(getline(ifs, line))\n        {\n            //\u5b57\u7b26\u4e32IO\n            istringstream iss(line);\n            string word;\n            while(iss &gt;&gt; word)\n            {\n                //word\u4e00\u5b9a\u662f\u6700\u7ec8\u8981\u4fdd\u5b58\u7684\u5355\u8bcd\u5417\uff1fhello!  1\n                string newWord = dealWord(word);//\u5bf9\u8001\u7684\u5355\u8bcd\u505a\u5904\u7406\uff0c\u5f97\u5230\u65b0\u7684\u5355\u8bcd\n                insert(newWord);//\u5c06\u6ee1\u8db3\u6761\u4ef6\u7684\u5355\u8bcd\u5b58\u5728vector\u4e2d\n            }\n        }\n\n        ifs.close();\n    }\n\n    void store(const string &amp;filename)\n    {\n        ofstream ofs(filename);\n        if(!ofs.good())\n        {\n            cerr &lt;&lt; \"open \" &lt;&lt; filename &lt;&lt; \" error!\" &lt;&lt; endl;\n            return;\n        }\n\n        for(size_t idx = 0; idx != _dict.size(); ++idx)\n        {\n            ofs &lt;&lt; _dict[idx]._word &lt;&lt; \"      \" \n                &lt;&lt; _dict[idx]._frequency &lt;&lt; endl;\n        }\n\n        ofs.close();\n    }\n\n    string dealWord(const string &amp;word)\n    {\n        for(size_t idx = 0; idx != word.size(); ++idx)\n        {\n            //word!\n            /* if((word[idx] &gt;= 'a'&amp;&amp; word[idx] &lt;= 'z') || (word[idx] &gt;= 'A'&amp;&amp; word[idx] &lt;= 'Z')) */\n            if(!isalpha(word[idx]))\n            {\n                return string();//\u4e34\u65f6\u5bf9\u8c61\n            }\n        }\n\n        return word;\n    }\n\n    void insert(const string &amp;word)\n    {\n        //\u5224\u65ad\u7a7a\u4e32\n        if(word == string())\n        {\n            return ;\n        }\n\n        size_t idx = 0;\n        for(idx = 0; idx != _dict.size(); ++idx)\n        {\n            if(word == _dict[idx]._word)\n            {\n                ++_dict[idx]._frequency;//\u9891\u7387\u8fdb\u884c++\n                break;\n            }\n        }\n\n        if(idx == _dict.size())\n        {\n            _dict.push_back(Record(word, 1));//\u5355\u8bcd\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4ee3\u7801\n        }\n    }\n\nprivate:\n    vector&lt;Record&gt; _dict;\n};\n\nint main(int argc, char **argv)\n{\n    Dictionary dictionary(13000);\n    cout &lt;&lt; \"begin reading...\" &lt;&lt; endl;\n    dictionary.read(\"The_Holy_Bible.txt\");\n    cout &lt;&lt; \"end reading...\" &lt;&lt; endl;\n    dictionary.store(\"dict.dat\");\n    return 0;\n}\n</code></pre>"},{"location":"cpp-base/#7string_1","title":"7\u3001String\u8fd0\u7b97\u7b26\u91cd\u8f7d","text":"<pre><code>/* stringOperator.cc */\n#include &lt;string.h&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing std::cout;\nusing std::endl;\nusing std::vector;\n\nclass String \n{\npublic:\n    String()\n   // : _pstr(nullptr)//\u540e\u9762\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u9700\u8981\u5224\u7a7a\n    : _pstr(new char[1]())\n    {\n        cout &lt;&lt; \"String()\" &lt;&lt; endl;\n    }\n\n    //String s1(\"hello\")\n    //String s1 = \"hello\";//String(\"hello\")\n    //\"hello\"=====String(\"hello\")\n    String(const char *pstr)\n    : _pstr(new char[strlen(pstr) + 1]())\n    {\n        cout &lt;&lt; \"String(const char *)\" &lt;&lt; endl;\n        strcpy(_pstr, pstr);\n    }\n\n    //String s2(s1);\n    //String s2 = s1;\n    String(const String &amp;rhs)\n    : _pstr(new char[strlen(rhs._pstr) +1]())\n    {\n        cout &lt;&lt; \"String(const String &amp;)\" &lt;&lt; endl;\n        strcpy(_pstr, rhs._pstr);\n    }\n\n    ~String()\n    {\n        cout &lt;&lt; \"~String()\" &lt;&lt; endl;\n        if(_pstr)\n        {\n            delete [] _pstr;\n            _pstr = nullptr;\n        }\n    }\n\n    //String s1;\n    //s1 = s1;\n    String &amp;operator=(const String &amp;rhs)\n    {\n        cout &lt;&lt; \"String &amp;operator=(const String &amp;)\" &lt;&lt; endl;\n        if(this != &amp;rhs)\n        {\n            delete [] _pstr;\n            _pstr = nullptr;\n\n            _pstr = new char[strlen(rhs._pstr) + 1]();\n            strcpy(_pstr, rhs._pstr);\n        }\n        return  *this;\n    }\n\n    // s1 = \"hello\";\u589e\u91cf\u5f00\u53d1\n    String &amp;operator=(const char *pstr)\n    {\n        cout &lt;&lt; \"String &amp;operator=(const char *)\" &lt;&lt; endl;\n        String tmp(pstr);\n        *this = tmp;\n\n        return *this;\n    }\n\n    //s1 += s2;\n    String &amp;operator+=(const String &amp;rhs)\n    {\n        cout &lt;&lt; \"String &amp;operator+=(const String &amp;)\" &lt;&lt;endl;\n        String tmp;\n        if(tmp._pstr)\n        {\n            delete [] tmp._pstr;//\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f\n        }\n        tmp._pstr = new char[strlen(_pstr) + 1]();\n        strcpy(tmp._pstr, _pstr);\n        delete [] _pstr;\n        _pstr = nullptr;\n        _pstr = new char[strlen(rhs._pstr) + strlen(tmp._pstr) + 1]();\n        strcpy(_pstr, tmp._pstr);\n        strcat(_pstr, rhs._pstr);\n\n        return *this;\n    }\n\n    //s1 += \"hello\"\n    String &amp;operator+=(const char *pstr)\n    {\n        cout &lt;&lt; \"String &amp;operator+=(const char *)\" &lt;&lt; endl;\n        String tmp(pstr);\n        *this += tmp;\n\n        return *this;\n    }\n\n    //const String s1(\"helo\");\n    //s1[0]\n    char &amp;operator[](std::size_t index)//index &gt; = 0\n    {\n        if(index &lt; size())\n        {\n            return _pstr[index];\n        }\n        else\n        {\n            static char nullchar = '\\0';\n            return nullchar;\n        }\n    }\n\n    const char &amp;operator[](std::size_t index) const\n    {\n        if(index &lt; size())\n        {\n            return _pstr[index];\n        }\n        else\n        {\n            static char nullchar = '\\0';\n            return nullchar;\n        }\n\n    }\n\n    std::size_t size() const\n    {\n        return strlen(_pstr);\n    }\n\n    const char* c_str() const\n    {\n        return _pstr;\n    }\n\n    friend bool operator==(const String &amp;, const String &amp;);\n    friend bool operator!=(const String &amp;, const String &amp;);\n\n    friend bool operator&lt;(const String &amp;, const String &amp;);\n    friend bool operator&gt;(const String &amp;, const String &amp;);\n    friend bool operator&lt;=(const String &amp;, const String &amp;);\n    friend bool operator&gt;=(const String &amp;, const String &amp;);\n\n    friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const String &amp;s);\n    friend std::istream &amp;operator&gt;&gt;(std::istream &amp;is, String &amp;s);\n\nprivate:\n    char * _pstr;\n};\n\nbool operator==(const String &amp;lhs, const String &amp;rhs)\n{\n    return !strcmp(lhs._pstr, rhs._pstr);\n}\n\nbool operator!=(const String &amp;lhs, const String &amp;rhs)\n{\n    return strcmp(lhs._pstr, rhs._pstr);\n}\n\nbool operator&lt;(const String &amp;lhs, const String &amp;rhs)\n{\n    return strcmp(lhs._pstr, rhs._pstr) &lt; 0;\n}\n\nbool operator&gt;(const String &amp;lhs, const String &amp;rhs)\n{\n    return strcmp(lhs._pstr, rhs._pstr) &gt; 0;\n}\nbool operator&lt;=(const String &amp;lhs, const String &amp;rhs)\n{\n    return strcmp(lhs._pstr, rhs._pstr) &lt;= 0;\n}\nbool operator&gt;=(const String &amp;lhs, const String &amp;rhs)\n{\n    return strcmp(lhs._pstr, rhs._pstr) &gt;= 0;\n}\n\nstd::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const String &amp;rhs)\n{\n    if(rhs._pstr)\n    {\n        os &lt;&lt; rhs._pstr;\n    }\n\n    return os;\n}\n\n//String s1(\"hello\")\n//cin &gt;&gt; s1;\nstd::istream &amp;operator&gt;&gt;(std::istream &amp;is, String &amp;rhs)\n{\n    if(rhs._pstr)\n    {\n        delete [] rhs._pstr;\n        rhs._pstr = nullptr;\n    }\n\n    //\u52a8\u6001\u83b7\u53d6\u4ece\u952e\u76d8\u8f93\u5165\u6570\u636e\u7684\u957f\u5ea6\n    vector&lt;char&gt; buffer;\n    char ch;\n    while((ch = is.get()) != '\\n')\n    {\n        buffer.push_back(ch);\n    }\n\n    rhs._pstr = new char[buffer.size() + 1]();\n    strncpy(rhs._pstr, &amp;buffer[0], buffer.size());\n\n    return is;\n}\n\nString operator+(const String &amp;lhs, const String &amp;rhs)\n{\n    cout &lt;&lt; \"String operator+(const String &amp;, const String &amp;)\" &lt;&lt; endl;\n\n    String tmp(lhs);\n    tmp += rhs;\n\n    return tmp;\n}\n//s1 + \"hello\"\nString operator+(const String &amp;lhs, const char *pstr)\n{\n    cout &lt;&lt; \"String operator+(const String &amp;, const char *)\"&lt;&lt; endl;\n    String tmp(lhs);\n    tmp += pstr;\n\n    return tmp;\n\n}\n\n//\"hello\" + s1\nString operator+(const char *pstr, const String &amp;rhs)\n{\n    cout &lt;&lt; \"String operator+(const char*, const String &amp;)\" &lt;&lt; endl;\n    String tmp(pstr);\n    tmp += rhs;\n\n    return tmp;\n}\n\n\nvoid test()\n{\n    String s1;\n    /* std::cin &gt;&gt; s1; */\n    cout &lt;&lt; \"s1 = \" &lt;&lt; s1 &lt;&lt; endl;\n\n    cout &lt;&lt; endl &lt;&lt; endl;\n    String s2 = \"hello\";\n    cout &lt;&lt; \"s2 = \" &lt;&lt; s2 &lt;&lt; endl;\n\n    cout &lt;&lt; endl &lt;&lt; \"1111\" &lt;&lt;  endl;\n    s2 = \"world\"; //error\n    cout &lt;&lt; \"s2 = \" &lt;&lt; s2 &lt;&lt; endl;\n\n    cout &lt;&lt; endl &lt;&lt; endl;\n    s2 = s2;\n    cout &lt;&lt; \"s2 = \" &lt;&lt; s2 &lt;&lt; endl;\n\n    cout &lt;&lt; endl &lt;&lt; endl;\n    String s3 = \"wuhan\";\n    s3 += \" welcome to string word\";\n    cout &lt;&lt; \"s3 = \" &lt;&lt; s3 &lt;&lt; endl;\n}\n\nint main(int argc, char **argv)\n{\n    test();\n    return 0;\n}\n</code></pre>"},{"location":"cpp-base/#10mapvector","title":"10\u3001\u8bcd\u9891\u7edf\u8ba1map\u4e0evector","text":"<p>map\uff1a</p> <pre><code>#include &lt;time.h&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n#include &lt;map&gt;\n#include &lt;utility&gt;\n\nusing std::endl;\nusing std::cerr;\nusing std::cout;\nusing std::string;\nusing std::ifstream;\nusing std::ofstream;\nusing std::istringstream;\nusing std::map;\nusing std::pair;\n\nclass Dictionary\n{\npublic:\n    void read(const string &amp;filename)\n    {\n        ifstream ifs(filename);\n        if(!ifs)\n        {\n            cerr &lt;&lt; \"ifs open \" &lt;&lt; filename &lt;&lt; \" error!\" &lt;&lt; endl;\n            return;\n        }\n\n        string line;\n        while(getline(ifs, line))\n        {\n            istringstream iss(line);\n            string word;\n            while(iss &gt;&gt; word)\n            {\n                string newWord = dealWord(word);\n                if(string() != newWord)\n                {\n                    ++_map[newWord];\n                }\n            }\n        }\n\n        ifs.close();\n    }\n\n    void store(const string &amp;filename)\n    {\n        ofstream ofs(filename);\n        if(!ofs)\n        {\n            cerr &lt;&lt; \"ofs open \" &lt;&lt; filename &lt;&lt; \" error!\" &lt;&lt; endl;\n            return;\n        }\n\n        map&lt;string, int&gt;::iterator it;\n        for(it = _map.begin(); it != _map.end(); ++it)\n        {\n            ofs &lt;&lt; it-&gt;first &lt;&lt; \"  \" &lt;&lt; it-&gt;second &lt;&lt; endl;\n        }\n\n        ofs.close();\n    }\nprivate:\n    string dealWord(const string &amp;word)\n    {\n        //\u67e5\u770b\u83b7\u53d6\u5230\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u5355\u8bcd\uff1a\u6807\u70b9\u7b26\u53f7\uff0ctrue1\u90fd\u4e0d\u7b97\n        for(size_t idx = 0; idx != word.size(); ++idx)\n        {\n            if(!isalpha(word[idx]))\n            {\n                //\u5982\u679c\u5b58\u5728\u6807\u70b9\uff0c\u6570\u5b57\u7b49\u4e0d\u7b97\u5355\u8bcd\uff0c\u8fd4\u56de\u7a7a\u4e32\n                return string();\n            }\n        }\n\n        //\u8f6c\u6362\u4e3a\u5408\u7406\u7684\u5355\u8bcd\n        return word;\n    }\n\nprivate:\n    map&lt;string, int&gt; _map;\n};\n\nint main(void)\n{\n    cout &lt;&lt; \"before reading...\" &lt;&lt; endl;\n    Dictionary dictionary;\n    time_t beg = time(NULL);\n    dictionary.read(\"The_Holy_Bible.txt\");\n    time_t end = time(NULL);\n    cout &lt;&lt; \"time: \" &lt;&lt; (end - beg) &lt;&lt; \"s\" &lt;&lt; endl;\n    cout &lt;&lt; \"aftre reading...\" &lt;&lt; endl;\n    dictionary.store(\"dictMap.dat\");\n    return 0;\n}\n</code></pre> <p>vector\uff1a</p> <pre><code>#include &lt;time.h&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n#include &lt;algorithm&gt;\n\nusing std::cout;\nusing std::cerr;\nusing std::endl;\nusing std::string;\nusing std::vector;\nusing std::ifstream;\nusing std::ofstream;\nusing std::istringstream;\nusing std::sort;\n\nstruct Record\n{\n    Record(const string &amp;word, int frequency)\n    : _word(word)\n    , _frequency(frequency)\n    {\n    }\n\n    string _word;\n    int _frequency;\n};\n\nbool operator&lt;(const Record &amp;lhs, const Record &amp;rhs)\n{\n    return lhs._word &lt; rhs._word;\n}\n\nclass Dictionary\n{\npublic:\n    Dictionary(int capa)\n    {\n        _dict.reserve(capa);\n    }\n\n    void read(const string &amp;filename)\n    {\n        ifstream ifs(filename);\n        if(!ifs)//bool operator!(){}  operator bool() {}\n        {\n            //cout cerr clog\n            cerr &lt;&lt; \"ifs open file \" &lt;&lt; filename &lt;&lt; \" error!\" &lt;&lt; endl;\n            return;\n        }\n\n        string line;\n        //while(ifs &gt;&gt; word)\n        while(getline(ifs, line))\n        {\n            istringstream iss(line);//\u4e32IO\uff0c\u5185\u5b58\n            string word;\n\n            //vector&lt;Point&gt; pt = {Point(1, 2), {3, 4}, (5, 6)};\n            //\u9017\u53f7\u8868\u8fbe\u5f0f\n            while(iss &gt;&gt; word, !iss.eof())//word\u53ef\u80fd\u5c31\u662f\u4e0d\u89c4\u8303abc123\n            /* while(iss &gt;&gt; word)//word\u53ef\u80fd\u5c31\u662f\u4e0d\u89c4\u8303abc123,while(\u771f\u503c\u8868\u8fbe\u5f0f) iss  ---&gt; bool /int */\n            {\n                //newWord\u662f\u5904\u7406\u4e4b\u540e\u7684\u65b0\u5355\u8bcd\n                string newWord = dealWord(word);\n\n                //\u628a\u65b0\u7684\u5355\u8bcd\u63d2\u5165\u5230vector\u91cc\u9762\n                insert(newWord);\n            }\n        }\n\n        //\u5c06\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\n        sort(_dict.begin(), _dict.end());\n\n        ifs.close();\n    }\n\n    //\u5c06\u5355\u8bcd\u4e0e\u8bcd\u9891\u5b58\u50a8\u5230\u6587\u4ef6\u4e2d\n    void store(const string &amp;filename)\n    {\n        ofstream ofs(filename);\n        if(!ofs)\n        {\n            cerr &lt;&lt; \"ofs open \" &lt;&lt; filename &lt;&lt; \" error\" &lt;&lt; endl;\n            return;\n        }\n\n        for(size_t idx = 0; idx != _dict.size(); ++idx)\n        {\n            ofs &lt;&lt; _dict[idx]._word &lt;&lt; \"   \" \n                &lt;&lt; _dict[idx]._frequency &lt;&lt; endl;\n        }\n\n        ofs.close();\n    }\n\n    //\u5bf9\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u5355\u8bcd\u8fdb\u884c\u5904\u7406\n    string dealWord(const string &amp;word)\n    {\n        for(size_t idx = 0; idx != word.size(); ++idx)\n        {\n            //if(word[idx] &gt; 'A')\n            if(!isalpha(word[idx]))\n            {\n                return string();//\u4ee5\u7a7a\u4e32\u8fdb\u884c\u66ff\u6362\n            }\n        }\n\n        return word;\n    }\n\n    //\u628a\u7ed3\u679c\u63d2\u5165\u5230vector\u4e2d\n    void insert(const string &amp;word)\n    {\n        if(word == string())\n        {\n            return;\n        }\n\n        size_t idx = 0;\n        for(idx = 0; idx != _dict.size(); ++idx)\n        {\n            if(word == _dict[idx]._word)\n            {\n                ++_dict[idx]._frequency;\n                break;//\u8bb0\u5f97\u5199\u4e0a\n            }\n        }\n\n        if(idx == _dict.size())\n        {\n            _dict.push_back(Record(word, 1));\n        }\n    }\n\nprivate:\n    vector&lt;Record&gt; _dict;\n};\n\nint main(int argc, char **argv)\n{\n    Dictionary dictionary(13000);\n    cout &lt;&lt; \"before reading...\" &lt;&lt; endl;\n    time_t beg = time(NULL);\n    dictionary.read(\"The_Holy_Bible.txt\");\n    time_t end  = time(NULL);\n    cout &lt;&lt; \"time : \" &lt;&lt; (end - beg) &lt;&lt; \"s\" &lt;&lt; endl;\n    cout &lt;&lt; \"after reading...\" &lt;&lt; endl;\n    dictionary.store(\"dictVector.dat\");\n    return 0;\n}\n</code></pre>"},{"location":"cpp-base/#11_1","title":"11\u3001\u6587\u672c\u67e5\u8be2","text":"<pre><code>/* TextQuery.cc */\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;set&gt;\n\nusing std::cout;\nusing std::endl;\nusing std::cin;\nusing std::ifstream;\nusing std::istringstream;\nusing std::vector;\nusing std::set;\nusing std::map;\nusing std::string;\n\nclass TextQuery\n{\npublic:\n    //\u6784\u9020\u51fd\u6570\u5148\u5206\u914d\u4e00\u5b9a\u7a7a\u95f4\u7684\u5927\u5c0f\n    TextQuery()\n    {\n        _file.reserve(100);\n    }\n\n    void readFile(const string &amp;filename);\n    void query(const string &amp;word);\n\nprivate:\n    void preProceccLine(string &amp;line);\n\nprivate:\n    //\u6bcf\u6b21\u83b7\u53d6\u4e00\u884c\u5e76\u5b58\u8d77\u6765\n    vector&lt;string&gt; _file;\n    //\u5355\u8bcd\u4ee5\u53ca\u8bcd\u9891\n    map&lt;string, int&gt; _dict;\n    //\u5355\u8bcd\u4ee5\u53ca\u6240\u5728\u884c\u53f7(\u6ce8\u610f\uff1a\u540c\u4e00\u4e2a\u5355\u8bcd\u5728\u76f8\u540c\u884c\u51fa\u73b0\uff0c\u53ea\u8bb0\u5f55\u4e00\u6b21)\n    map&lt;string, set&lt;int&gt;&gt; _word2line;\n};\n\nvoid TextQuery::readFile(const string &amp;filename)\n{\n    ifstream ifs(filename);\n    if(!ifs)\n    {\n        cout &lt;&lt; \"ifstream open \" &lt;&lt; filename &lt;&lt; \" error!\" &lt;&lt; endl;\n        return;\n    }\n\n    string line;\n    size_t lineNumber = 0;\n    while(getline(ifs, line))\n    {\n        //\u8bfb\u4e00\u884c\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u5728vector\u4e2d(\u5bf9\u5355\u8bcd\u5904\u7406\u524d\u5c31\u5b58\u8d77\u6765\uff0c\u5b58\u7684\u662f\u539f\u59cb\u7684)\n        _file.push_back(line);\n\n        //\u5bf9\u8bfb\u53d6\u884c\u7684\u5355\u8bcd\u8fdb\u884c\u5904\u7406\n        preProceccLine(line);\n\n        istringstream iss(line);\n        string word;\n        while(iss &gt;&gt; word)\n        {\n            //\u7edf\u8ba1\u5355\u8bcd\u4e0e\u8bcd\u9891\n            ++_dict[word];\n\n            //\u5c06\u5355\u8bcd\u6240\u5728\u7684\u884c\u8bb0\u5f55\u4e0b\u6765\n            _word2line[word].insert(lineNumber);\n        }\n\n        ++lineNumber;\n    }\n\n    ifs.close();\n}\n\nvoid TextQuery::query(const string &amp;word)\n{\n    int count = _dict[word];//\u83b7\u53d6\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\n    cout &lt;&lt; word &lt;&lt; \" occurs \" &lt;&lt; count &lt;&lt; (count &gt; 1 ? \" times\" : \" time.\") &lt;&lt; endl;//\u6253\u5370\u5355\u8bcd\u6b21\u6570\n\n    auto lines = _word2line[word];//\u5bf9\u540c\u4e00\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u884c\u8fdb\u884c\u904d\u5386\uff0c\u8f93\u51fa\u5355\u8bcd\u4ee5\u53ca\u884c\u53f7\n    for(auto &amp;number : lines)\n    {\n        cout &lt;&lt; \"    (line \" &lt;&lt; number + 1 &lt;&lt; \") \" &lt;&lt; _file[number] &lt;&lt; endl;\n    }\n}\n\nvoid TextQuery::preProceccLine(string &amp;line)\n{\n    for(auto &amp;ch : line)\n    {\n        if(!isalpha(ch))//\u5904\u7406\u5355\u8bcd\uff0c\u5982\u679c\u4e0d\u662f\u5b57\u6bcd\u5c31\u7528\u7a7a\u683c\u4ee3\u66ffabc? abc123 Hello\n        {\n            ch = ' ';\n        }\n        else if(isupper(ch))//\u5982\u679c\u662f\u5927\u5199\u5c31\u8f6c\u4e3a\u5c0f\u5199,Hello\n        {\n            ch = tolower(ch);\n        }\n    }\n}\n\nint main(int argc, char **argv)\n{\n    TextQuery tq;\n    tq.readFile(\"china_daily.txt\");\n    cout &lt;&lt; \" please input a query word: \" &lt;&lt; endl;\n    string word;\n    while(cin &gt;&gt; word)\n    {\n        tq.query(word);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp-boost/","title":"C++ \u63d0\u9ad8","text":""},{"location":"cpp-boost/#reactorv1","title":"\u4e00\u3001ReactorV1\u7248\u672c","text":""},{"location":"cpp-boost/#1","title":"1\u3001\u7c7b\u7684\u8bbe\u8ba1","text":"<p>Socket\u7c7b\uff1a\u6240\u6709\u4e0e\u5957\u63a5\u5b57\u76f8\u5173\u7684\u64cd\u4f5c\u90fd\u5c01\u88c5\u5230\u8be5\u7c7b\u4e2d\uff0c\u5305\u62ec\uff1a\u4f7f\u7528socket\u521b\u5efa\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u4f7f\u7528close\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u4ee5\u53ca\u83b7\u53d6socket\u7684\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>InetAddress\u7c7b\uff1a\u5c06\u6240\u6709\u4e0e\u5730\u5740\u76f8\u5173\u7684\u64cd\u4f5c\u5c01\u88c5\u5230\u8be5\u7c7b\u4e2d\u3002\u5305\u62ec\uff1a\u4f7f\u7528ip\u4e0eport\u586b\u5145\u7ed3\u6784\u4f53\u7ed9bind\u51fd\u6570\u8fdb\u884c\u7ed1\u5b9a\u670d\u52a1\u5668\u7684ip\u4e0e\u7aef\u53e3\u3001\u53ef\u4ee5\u4f7f\u7528\u8be5\u7c7b\u83b7\u53d6ip\u4e0e\u7aef\u53e3\u53f7\u3002\u53ef\u4ee5\u5c06struct sockaddr_in\u7684\u53d8\u91cf\u4f5c\u4e3a\u8be5\u7c7b\u7684\u6570\u636e\u6210\u5458\u3002</p> <p>Acceptor\u7c7b\uff1a\u8be5\u7c7b\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u670d\u52a1\u5668\u7684\u6240\u6709\u7684\u5e38\u89c4\u51fd\u6570\u90fd\u5c01\u88c5\u5230\u7ed9\u7c7b\u4e2d\uff0c\u8ba9\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fdb\u884c\u8fde\u63a5\u5230\u670d\u52a1\u5668\u3002\u5305\u62ec\uff1a\u5730\u5740\u590d\u7528\u3001\u7aef\u53e3\u590d\u7528\u3001bind\u3001listen\u3001accept\u51fd\u6570\u3002</p> <p>TcpConnection\u7c7b\uff1a\u53ea\u8981Acceptor\u8c03\u7528accept\u51fd\u6570\u6709\u6b63\u786e\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u90a3\u4e48\u5c31\u8868\u660e\u4e09\u6b21\u63e1\u624b\u5df2\u7ecf\u5b8c\u5168\u5efa\u7acb\u6210\u529f\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8be5\u8fde\u63a5\u8fdb\u884c\u6570\u636e\u7684\u53d1\u9001\u4e0e\u63a5\u53d7\uff0c\u53d1\u9001\u6570\u636e\u53ef\u4ee5\u5c01\u88c5\u51fd\u6570send\u3001\u63a5\u53d7\u6570\u636e\u53ef\u4ee5\u5c01\u88c5receive\u51fd\u6570\u3002</p> <p>SocketIO\u7c7b\uff1a\u8be5\u7c7b\u7684\u4f5c\u7528\u5c31\u662f\u4e3a\u4e86\u771f\u6b63\u7684\u8fdb\u884c\u6570\u636e\u7684\u6536\u53d1\uff0c\u4e5f\u5c31\u662f\u5e95\u5c42\u4f1a\u8c03\u7528\u76f8\u5e94\u7684\u8bfb\u5199\u6570\u636e\u7684\u51fd\u6570read/recv\u3001write/send\u3002</p>"},{"location":"cpp-boost/#2","title":"2\u3001\u7c7b\u56fe\u7684\u8bbe\u8ba1","text":""},{"location":"cpp-boost/#3","title":"3\u3001\u5e38\u7528\u51fd\u6570","text":"<pre><code>ssize_t recv(int sockfd, void *buf, size_t len, int flags);\n//\u5982\u679c\u7b2c\u56db\u4e2a\u53c2\u6570flags\u4e3a0\uff0c\u90a3\u4e48recv\u4e0eread\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\u3002\u4f46\u662f\u5982\u679cflags\u4e3aMSG_PEEK\uff0c\u90a3\u4e48\u4f1a\u5c06\u5185\u6838\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u62f7\u8d1d\u51fa\u6765\uff0c\u800c\u4e0d\u4f1a\u79fb\u9664\u3002\n\n#include &lt;sys/socket.h&gt;\nint getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n//\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26sockfd\u83b7\u53d6\u672c\u7aef\u7684\u5730\u5740addr\n\nint getpeername(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n//\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26sockfd\u83b7\u53d6\u5bf9\u7aef\u7684\u5730\u5740addr\n</code></pre>"},{"location":"cpp-boost/#reactorv2","title":"\u4e8c\u3001ReactorV2","text":""},{"location":"cpp-boost/#1_1","title":"1\u3001\u4f2a\u4ee3\u7801","text":"<pre><code>void EventLoop::loop()\n{\n    _isLooping = true;\n    while(_isLooping)\n    {\n        waitEpollFd();\n    }\n}\n\nvoid EventLoop::uploop()\n{\n    _isLooping = false;\n}\n\nvoid EventLoop::waitEpollFd()\n{\n    nready = epoll_wait();\n    if(-1 == nready &amp;&amp; errno == EINTR )\n    {\n        continue;\n    }\n    else if(-1 == nready)\n    {\n        cerr;\n        return;\n    }\n    else if(0 == nready)\n    {\n        cout &lt;&lt; \"\u8d85\u65f6\" &lt;&lt; endl;\n    }\n    else\n    {\n        for(size_t idx = 0; idx &lt; nready; ++idx)\n        {\n            if(\u6587\u4ef6\u63cf\u8ff0\u7b26 == listenfd)\n            {\n                //\u5904\u7406\u65b0\u7684\u8fde\u63a5\u8bf7\u6c42\n                handleNewConnection();\n            }\n            else\n            {\n                //\u53ef\u4ee5\u8001\u7684\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u7684\u6536\u53d1\n                handleMessage();\n            }\n        }\n    }\n}\n\nvoid EventLoop::handleNewConnection()\n{\n    int connfd = _acceptor.accept();\n\n    //\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26connfd\u653e\u5728\u7ea2\u9ed1\u6811\u4e0a\u8fdb\u884c\u76d1\u542c\n    addEpollReadFd(connfd);\n\n    //\u521b\u5efa\u51fa\u8fde\u63a5\n    TcpConnection con(connfd);\n\n    //\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0e\u8fde\u63a5\u5b58\u653e\u5728map\u4e2d\n    _conns.insert(connfd, TcpConnection);   \n}\n\nvoid EventLoop::handleMessage(int fd)\n{\n    auto it = _conns.find(fd);\n    if(it != _conns.end())\n    {\n        //\u8fde\u63a5\u662f\u5b58\u5728\u7684\n        //\u63a5\u53d7\u6570\u636e\n        msg = it-&gt;second-&gt;receive();\n        //\u53d1\u9001\u6570\u636e\n        it-&gt;second-&gt;send(msg);\n    }\n    else\n    {\n        //\u8fde\u63a5\u662f\u4e0d\u5b58\u5728\u7684\n    }\n}\n</code></pre>"},{"location":"cpp-boost/#2_1","title":"2\u3001\u4e09\u4e2a\u534a\u4e8b\u4ef6","text":"<p>TCP\u7f51\u7edc\u7f16\u7a0b\u6700\u672c\u8d28\u7684\u662f\u5904\u7406\u4e09\u4e2a\u534a\u4e8b\u4ef6\uff1a</p> <p>\u8fde\u63a5\u5efa\u7acb\uff1a\u5305\u62ec\u670d\u52a1\u5668\u7aef\u88ab\u52a8\u63a5\u53d7\u8fde\u63a5\uff08accept\uff09\u548c\u5ba2\u6237\u7aef\u4e3b\u52a8\u53d1\u8d77\u8fde\u63a5\uff08connect\uff09\u3002TCP\u8fde\u63a5\u4e00\u65e6\u5efa\u7acb\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5c31\u662f\u5e73\u7b49\u7684\uff0c\u53ef\u4ee5\u5404\u81ea\u6536\u53d1\u6570\u636e\u3002 \u8fde\u63a5\u65ad\u5f00\uff1a\u5305\u62ec\u4e3b\u52a8\u65ad\u5f00\uff08close\u3001shutdown\uff09\u548c\u88ab\u52a8\u65ad\u5f00\uff08read()\u8fd4\u56de0\uff09\u3002 \u6d88\u606f\u5230\u8fbe\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u8bfb\u3002\u8fd9\u662f\u6700\u4e3a\u91cd\u8981\u7684\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u5bf9\u5b83\u7684\u5904\u7406\u65b9\u5f0f\u51b3\u5b9a\u4e86\u7f51\u7edc\u7f16\u7a0b\u7684\u98ce\u683c\uff08\u963b\u585e\u8fd8\u662f\u975e\u963b\u585e\uff0c\u5982\u4f55\u5904\u7406\u5206\u5305\uff0c\u5e94\u7528\u5c42\u7684\u7f13\u51b2\u5982\u4f55\u8bbe\u8ba1\u7b49\u7b49\uff09\u3002 \u6d88\u606f\u53d1\u9001\u5b8c\u6bd5\uff1a\u8fd9\u7b97\u534a\u4e2a\u3002\u5bf9\u4e8e\u4f4e\u6d41\u91cf\u7684\u670d\u52a1\uff0c\u53ef\u4e0d\u5fc5\u5173\u5fc3\u8fd9\u4e2a\u4e8b\u4ef6\uff1b\u53e6\u5916\uff0c\u8fd9\u91cc\u7684\u201c\u53d1\u9001\u5b8c\u6bd5\u201d\u662f\u6307\u6570\u636e\u5199\u5165\u64cd\u4f5c\u7cfb\u7edf\u7f13\u51b2\u533a\uff08\u5185\u6838\u7f13\u51b2\u533a\uff09\uff0c\u5c06\u7531TCP\u534f\u8bae\u6808\u8d1f\u8d23\u6570\u636e\u7684\u53d1\u9001\u4e0e\u91cd\u4f20\uff0c\u4e0d\u4ee3\u8868\u5bf9\u65b9\u5df2\u7ecf\u63a5\u6536\u5230\u6570\u636e\u3002</p>"},{"location":"cpp-boost/#3_1","title":"3\u3001\u7c7b\u56fe","text":""},{"location":"cpp-boost/#4","title":"4\u3001\u6dfb\u52a0\u4e09\u4e2a\u534a\u4e8b\u4ef6\uff08\u56de\u8c03\uff09","text":"<p>Tcp\u7f51\u7edc\u7f16\u7a0b\u4e2d\u6709\u4e09\u4e2a\u534a\u4e8b\u4ef6\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u5173\u6ce8\u5176\u4e2d\u7684\u524d\u4e09\u4e2a\uff0c\u5373\uff1a\u8fde\u63a5\u5efa\u7acb\u3001\u6d88\u606f\u5230\u8fbe\u3001\u8fde\u63a5\u65ad\u5f00\u3002\u4e09\u4e2a\u4e8b\u4ef6\u90fd\u662f\u4e0e\u8fde\u63a5\u76f8\u5173\u7684\uff0c\u4e5f\u5c31\u662f\u4e0eTcpConnection\u76f8\u5173\uff0c\u8fd9\u4e09\u4e2a\u4e8b\u4ef6\u53ef\u4ee5\u4f7f\u7528\u56de\u8c03\u673a\u5236\u7684\u5f62\u5f0f\u8fdb\u884c\uff0c\u4e5f\u5c31\u662f\u56de\u8c03\u51fd\u6570\u7684\u6ce8\u518c\u4e0e\u56de\u8c03\u51fd\u6570\u7684\u6267\u884c\uff0c\u4f46\u662f\u73b0\u5728TcpConnection\u5bf9\u8c61\u7684\u521b\u5efa\u5728EventLoop\u4e2d\uff0c\u6240\u4ee5\u4e09\u4e2a\u4e8b\u4ef6\u9700\u8981\u5148\u4f20\u9012\u7ed9EventLoop\uff0c\u518d\u4ea4\u7ed9TcpConnection\uff0c\u800c\u5728C++\u4e2d\uff0c\u56de\u8c03\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528bind\u4e0efunction\u7ed3\u5408\u4f7f\u7528\uff0c\u4e5f\u5c31\u662ffunction\u53ef\u4ee5\u7ed1\u5b9a\u51fd\u6570\u7c7b\u578b\uff0c\u800c\u73b0\u5728\u6bcf\u4e2a\u4e8b\u4ef6\u90fd\u4e0e\u8fde\u63a5\u76f8\u5173\uff0c\u6240\u4ee5\u5c31\u662f<code>function&lt;void(const TcpConnectionPtr &amp;)&gt;</code>,\u4e5f\u5c31\u662f\u53ef\u4ee5\u5c06\u5176\u6539\u540d\uff0c<code>using TcpConnectionCallback = function&lt;void(const TcpConnectionPtr &amp;)&gt;</code>.\u7136\u540e\u5c31\u662fEventLoop\u6ce8\u518c\u4e09\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u4e14\u4f5c\u4e3a\u6865\u6881\u4f20\u9012\u7ed9TcpConnection\u5bf9\u8c61\uff0c\u4f46\u662fEventLoop\u4e0d\u4f1a\u6267\u884c\u8be5\u56de\u8c03\u51fd\u6570\uff0c\u56e0\u4e3a\u4e09\u4e2a\u4e8b\u4ef6\u7684\u6267\u884c\u53ea\u4e0eTcpConnection\u8fde\u63a5\u76f8\u5173\uff0c\u4e0eEventLoop\u6ca1\u6709\u5173\u7cfb\u3002\u6700\u540e\u7684\u7ed3\u679c\u662f\uff0c\u5728TcpConnection\u4e0eEventLoop\u90fd\u6ce8\u518c\u4e09\u4e2a\u56de\u8c03\u51fd\u6570\u4e0e\u8bbe\u7f6e\u4e09\u4e2a\u6570\u636e\u6210\u5458\uff0c\u4f46\u662f\u53ea\u6709TcpConnection\u4e2d\u6709\u4e09\u4e2a\u56de\u8c03\u51fd\u6570\u7684\u6267\u884c\u3002</p>"},{"location":"cpp-boost/#5","title":"5\u3001\u6838\u5fc3\u4ee3\u7801\u7684\u89e3\u6790","text":""},{"location":"cpp-boost/#51eventloop","title":"5.1\u3001EventLoop\u4e2d\u952e\u503c\u5bf9\u5b58\u50a8","text":""},{"location":"cpp-boost/#52eventloop","title":"5.2\u3001EventLoop\u4e2d\u4e09\u4e2a\u56de\u8c03\u7684\u5b58\u50a8","text":""},{"location":"cpp-boost/#53eventloop","title":"5.3\u3001EventLoop\u4e2d\u4e09\u4e2a\u56de\u8c03\u7684\u6ce8\u518c","text":""},{"location":"cpp-boost/#54tcpconnection","title":"5.4\u3001TcpConnection\u4e2d\u4e09\u4e2a\u56de\u8c03\u7684\u5b58\u50a8","text":""},{"location":"cpp-boost/#55tcpconnection","title":"5.5\u3001TcpConnection\u4e2d\u4e09\u4e2a\u56de\u8c03\u7684\u6ce8\u518c","text":""},{"location":"cpp-boost/#56tcpconnection","title":"5.6\u3001TcpConnection\u4e2d\u4e09\u4e2a\u56de\u8c03\u7684\u6267\u884c","text":""},{"location":"cpp-boost/#57eventloopepoll_wait","title":"5.7\u3001EventLoop\u4e2depoll_wait\u53c2\u6570\u95ee\u9898","text":""},{"location":"cpp-boost/#58eventloop","title":"5.8\u3001EventLoop\u4e2d\u5904\u7406\u65b0\u7684\u8fde\u63a5\u8bf7\u6c42","text":""},{"location":"cpp-boost/#59eventloop","title":"5.9\u3001EventLoop\u4e2d\u8001\u7684\u8fde\u63a5\u4e0a\u6570\u636e\u7684\u6536\u53d1","text":""},{"location":"cpp-boost/#6","title":"6\u3001\u4ee3\u7801\u6d41\u7a0b","text":""},{"location":"cpp-boost/#reactorv3","title":"\u4e09\u3001ReactorV3","text":""},{"location":"cpp-boost/#1_2","title":"1\u3001\u7c7b\u56fe","text":""},{"location":"cpp-boost/#eventfd","title":"\u56db\u3001eventfd\u7684\u4f7f\u7528","text":""},{"location":"cpp-boost/#1_3","title":"1\u3001\u7279\u70b9","text":"<p>\u5b83\u7684\u4e3b\u8981\u662f\u7528\u4e8e\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u95f4\u901a\u4fe1(\u5982\u901a\u77e5/\u7b49\u5f85\u673a\u5236\u7684\u5b9e\u73b0)\u3002</p>"},{"location":"cpp-boost/#2_2","title":"2\u3001\u63a5\u53e3","text":"<pre><code>#include &lt;sys/eventfd.h&gt;\nint eventfd(unsigned int initval, int flags);\n//initval:\u662f\u7531\u5185\u6838\u8ba1\u6570\u5668\u7ef4\u62a4\u7684\u4e00\u4e2a\u521d\u59cb\u503c\u3002\n//flags:\u6807\u5fd7\u4f4d\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a0.\u4e5f\u53ef\u4ee5\u662fEFD_NONBLOCK\u6216EFD_CLOEXEC\n//\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u8fdb\u884c\u8bfb\u5199\u4e0e\u76d1\u542c\uff08IO\u591a\u8def\u590d\u7528\uff09\n</code></pre>"},{"location":"cpp-boost/#3_2","title":"3\u3001\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1","text":"<p>\u4f8b\u5b50\u4e2d\u7236\u8fdb\u7a0b\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u5b50\u8fdb\u7a0b\u8fdb\u884c\u5199\u64cd\u4f5c\u3002\u8bfb\u5199\u4f7f\u7528\u7684\u662f\u540c\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002</p> <p></p>"},{"location":"cpp-boost/#4_1","title":"4\u3001\u7ebf\u7a0b\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1","text":""},{"location":"cpp-boost/#reactorv4","title":"\u4e94\u3001ReactorV4","text":""},{"location":"cpp-boost/#1_4","title":"1\u3001\u539f\u7406\u56fe","text":""},{"location":"cpp-boost/#2reactorv3","title":"2\u3001Reactorv3\u7f3a\u9677","text":"<ul> <li>\u5982\u679c\u4e1a\u52a1\u903b\u8f91\u7684\u5904\u7406\u6bd4\u8f83\u590d\u6742\uff0c\u90a3\u4e48V3\u7248\u672c\u4e2d\u7684onMessage\u51fd\u6570\u4e2d\u5c31\u4e0d\u80fd\u5904\u7406\u4e1a\u52a1\u903b\u8f91\uff0c\u4e0d\u7136\u53ea\u6709\u524d\u4e00\u4e2a\u8fde\u63a5\u5904\u7406\u5b8c\u6bd5\u4e4b\u540e\u624d\u80fd\u5904\u7406\u4e0b\u4e00\u4e2a\u3002</li> <li>\u53ef\u4ee5\u5c06\u4e1a\u52a1\u903b\u8f91\u7684\u5904\u7406\u4ea4\u7ed9\u7ebf\u7a0b\u6c60\u53bb\u505a\u3002\u9700\u8981\u5c06msg\u4ea4\u7ed9\u7ebf\u7a0b\u6c60\uff0c\u4f46\u662f\u5982\u679cmsg\u5904\u7406\u597d\u4e4b\u540e\uff0c\u4e5f\u8981\u53d1\u9001\u7ed9EventLoop\uff0c\u800c\u53d1\u9001\u6570\u636e\u7684\u80fd\u529b\u53ea\u6709TcpConnection\uff0c\u6240\u4ee5\u5c31\u5c06\u8fde\u63a5\u4e0e\u5904\u7406\u597d\u4e4b\u540e\u7684\u6d88\u606f\u90fd\u53d1\u9001\u7ed9\u7ebf\u7a0b\u6c60\u3002</li> <li>\u53ef\u4ee5\u5c06\u8fde\u63a5TcpConnection\u7684\u5bf9\u8c61con\u4e0e\u9700\u8981\u53d1\u9001\u7684\u6570\u636emsg\u6253\u5305\u4ea4\u7ed9MyTask\uff0c\u7136\u540e\u5728MyTask\u7684process\u51fd\u6570\u5904\u7406msg\u8fd9\u4e2a\u4e1a\u52a1\u903b\u8f91\u3002\u7136\u540e\u4e1a\u52a1\u903b\u8f91\u5904\u7406\u597d\u4e4b\u540e\u901a\u8fc7con\u8fdb\u884c\u53d1\u9001\u7ed9EventLoop</li> <li>\u90a3\u4e48\u7ebf\u7a0b\u6c60\u5728\u5904\u7406\u597d\u4e1a\u52a1\u903b\u8f91\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u7acb\u9a6c\u8fdb\u884c\u53d1\u9001\u7ed9EventLoop\uff0c\u56e0\u4e3a\u901a\u4fe1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5df2\u7ecf\u5728EventLoop\u4e2d\u88ab\u76d1\u542c\u4e86\uff0c\u6240\u4ee5\u9700\u8981\u901a\u77e5EventLoop\u63a5\u6536\u5904\u7406\u597d\u4e4b\u540e\u7684\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u8ba9\u7ebf\u7a0b\u6c60\u4e0eEventLoop\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\uff0c\u901a\u4fe1\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u6240\u8bf4\u7684eventfd\u3002</li> </ul>"},{"location":"cpp-boost/#3_3","title":"3\u3001\u7c7b\u56fe","text":""},{"location":"cpp-boost/#4_2","title":"4\u3001\u6838\u5fc3\u4ee3\u7801","text":""},{"location":"cpp-boost/#41eventloop","title":"4.1\u3001EventLoop\u4e2d\u7684\u5b58\u653e\u4efb\u52a1","text":""},{"location":"cpp-boost/#42eventloop","title":"4.2\u3001EventLoop\u4e2d\u7684\u6267\u884c\u4efb\u52a1","text":""},{"location":"cpp-boost/#42tcpconnectionsendinloop","title":"4.2\u3001TcpConnection\u4e2d\u7684sendInLoop\u7684\u5b9e\u73b0","text":""},{"location":"cpp-boost/#5_1","title":"5\u3001\u6d41\u7a0b\u56fe","text":""},{"location":"cpp-boost/#reactorv5","title":"\u516d\u3001ReactorV5","text":""},{"location":"cpp-boost/#1_5","title":"1\u3001\u7c7b\u56fe","text":""},{"location":"cpp-boost/#2_3","title":"2\u3001\u4ee3\u7801\u96be\u70b9","text":""},{"location":"cpp-boost/#21start","title":"2.1\u3001start\u4e2d\u7684\u5360\u4f4d\u7b26","text":""},{"location":"cpp-boost/#reactor","title":"\u4e03\u3001Reactor\u5404\u7248\u672c\u603b\u7ed3","text":"<p>1\u3001\u6267\u884csend\u4e0eread\u7684\u7ebf\u7a0b\uff0c\u662f\u6267\u884cIO\u64cd\u4f5c\uff0c\u5c06\u5176\u6210\u4e3aIO\u7ebf\u7a0b\u3002</p> <p>2\u3001\u5c06\u6267\u884c\u4e1a\u52a1\u903b\u8f91\u7684decode\u3001compute\u3001encode\u7684\u7ebf\u7a0b\u79f0\u4e3a\u8ba1\u7b97\u7ebf\u7a0b\u3002</p> <p>3\u3001\u5982\u679cIO\u64cd\u4f5c\u6bd4\u8f83\u5bc6\u96c6\uff0c\u4e5f\u5c31\u662fIO\u64cd\u4f5c\u82b1\u8d39\u7684\u65f6\u95f4\u6bd4\u8f83\u4e45\uff0c\u4e5f\u5c31\u662fIO\u5bc6\u96c6\u578b\u3002\u4e5f\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u57fa\u7840\u7684Reactor\u7248\u672c\u3002\u4f46\u662f\u5982\u679c\u8ba1\u7b97\u7ebf\u7a0b\u8017\u8d39\u65f6\u95f4\u6bd4\u8f83\u4e45\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u7a0b\u6c60 + Reactor\u7248\u672c\u3002</p>"},{"location":"cpp-boost/#timerfd","title":"\u516b\u3001timerfd\u7684\u4f7f\u7528","text":""},{"location":"cpp-boost/#1_6","title":"1\u3001\u7279\u5f81","text":"<p>\u8fd9\u4e2a\u63a5\u53e3\u57fa\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u53ef\u8bfb\u4e8b\u4ef6\u8fdb\u884c\u8d85\u65f6\u901a\u77e5\uff0c\u6240\u4ee5\u80fd\u591f\u88ab\u7528\u4e8eselect/poll/epoll\u7684\u5e94\u7528\u573a\u666f</p>"},{"location":"cpp-boost/#2_4","title":"2\u3001\u51fd\u6570\u63a5\u53e3","text":"<pre><code>#include &lt;sys/timerfd.h&gt;\nint timerfd_create(int clockid, int flags);\n\u529f\u80fd\uff1a\u8be5\u51fd\u6570\u751f\u6210\u4e00\u4e2a\u5b9a\u65f6\u5668\u5bf9\u8c61\uff0c\u8fd4\u56de\u4e0e\u4e4b\u5173\u8054\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\n\u53c2\u6570\u8be6\u89e3\uff1a\nclockid:\u53ef\u8bbe\u7f6e\u4e3a\nCLOCK_REALTIME\uff1a\u76f8\u5bf9\u65f6\u95f4\uff0c\u4ece1970.1.1\u5230\u76ee\u524d\u7684\u65f6\u95f4\u3002\u66f4\u6539\u7cfb\u7edf\u65f6\u95f4 \u4f1a\u66f4\u6539\u83b7\u53d6\u7684\u503c\uff0c\u5b83\u4ee5\u7cfb\u7edf\u65f6\u95f4\u4e3a\u5750\u6807\u3002\nCLOCK_MONOTONIC\uff1a\u7edd\u5bf9\u65f6\u95f4\uff0c\u83b7\u53d6\u7684\u65f6\u95f4\u4e3a\u7cfb\u7edf\u91cd\u542f\u5230\u73b0\u5728\u7684\u65f6\u95f4\uff0c\u66f4\u6539\u7cfb\u7edf\u65f6\u95f4\u5bf9\u9f50\u6ca1\u6709\u5f71\u54cd\u3002\nflags: \u53ef\u8bbe\u7f6e\u4e3a\nTFD_NONBLOCK\uff08\u975e\u963b\u585e\uff09\uff0c\nTFD_CLOEXEC\uff08\u540cO_CLOEXEC\uff09\nlinux\u5185\u68382.6.26\u7248\u672c\u4ee5\u4e0a\u90fd\u6307\u5b9a\u4e3a0\n\n\nint timerfd_settime(int fd, int flags,const struct itimerspec *new_value,\n                                   struct itimerspec *old_value);\n\u529f\u80fd\uff1a\u8be5\u51fd\u6570\u80fd\u591f\u542f\u52a8\u548c\u505c\u6b62\u5b9a\u65f6\u5668\n\u53c2\u6570\u8be6\u89e3\uff1a\nfd: timerfd\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\nflags: \n0\u8868\u793a\u662f\u76f8\u5bf9\u5b9a\u65f6\u5668\nTFD_TIMER_ABSTIME\u8868\u793a\u662f\u7edd\u5bf9\u5b9a\u65f6\u5668\nnew_value:\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u5982\u679c\u4e3a0\u5219\u8868\u793a\u505c\u6b62\u5b9a\u65f6\u5668\u3002\nold_value:\n\u4e00\u822c\u8bbe\u4e3aNULL, \u4e0d\u4e3aNULL,\n\u5219\u8fd4\u56de\u5b9a\u65f6\u5668\u8fd9\u6b21\u8bbe\u7f6e\u4e4b\u524d\u7684\u8d85\u65f6\u65f6\u95f4\n\nstruct timespec \n{\n    time_t tv_sec;                /* Seconds */\n    long   tv_nsec;               /* Nanoseconds */\n};\n\nstruct itimerspec \n{\n    struct timespec it_interval;  /* Interval for periodic timer\uff0c\u5468\u671f\u65f6\u95f4\uff0c\u65f6\u95f4\u95f4\u9694 */\n    struct timespec it_value;     /* Initial expiration ,\u8d77\u59cb\u65f6\u95f4*/\n};\n\n</code></pre>"},{"location":"cpp-boost/#3timerfd","title":"3\u3001timerfd\u7684\u5c01\u88c5","text":""},{"location":"cppsearch/","title":"C++\u641c\u7d22\u5f15\u64ce\u9879\u76ee","text":""},{"location":"cppsearch/#reactor","title":"Reactor","text":""},{"location":"cppsearch/#reactorv1","title":"\u4e00\u3001ReactorV1\u7248\u672c","text":""},{"location":"cppsearch/#1","title":"1\u3001\u7c7b\u7684\u8bbe\u8ba1","text":"<p>Socket\u7c7b\uff1a\u6240\u6709\u4e0e\u5957\u63a5\u5b57\u76f8\u5173\u7684\u64cd\u4f5c\u90fd\u5c01\u88c5\u5230\u8be5\u7c7b\u4e2d\uff0c\u5305\u62ec\uff1a\u4f7f\u7528socket\u521b\u5efa\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u4f7f\u7528close\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u4ee5\u53ca\u83b7\u53d6socket\u7684\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>InetAddress\u7c7b\uff1a\u5c06\u6240\u6709\u4e0e\u5730\u5740\u76f8\u5173\u7684\u64cd\u4f5c\u5c01\u88c5\u5230\u8be5\u7c7b\u4e2d\u3002\u5305\u62ec\uff1a\u4f7f\u7528ip\u4e0eport\u586b\u5145\u7ed3\u6784\u4f53\u7ed9bind\u51fd\u6570\u8fdb\u884c\u7ed1\u5b9a\u670d\u52a1\u5668\u7684ip\u4e0e\u7aef\u53e3\u3001\u53ef\u4ee5\u4f7f\u7528\u8be5\u7c7b\u83b7\u53d6ip\u4e0e\u7aef\u53e3\u53f7\u3002\u53ef\u4ee5\u5c06struct sockaddr_in\u7684\u53d8\u91cf\u4f5c\u4e3a\u8be5\u7c7b\u7684\u6570\u636e\u6210\u5458\u3002</p> <p>Acceptor\u7c7b\uff1a\u8be5\u7c7b\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u670d\u52a1\u5668\u7684\u6240\u6709\u7684\u5e38\u89c4\u51fd\u6570\u90fd\u5c01\u88c5\u5230\u7ed9\u7c7b\u4e2d\uff0c\u8ba9\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fdb\u884c\u8fde\u63a5\u5230\u670d\u52a1\u5668\u3002\u5305\u62ec\uff1a\u5730\u5740\u590d\u7528\u3001\u7aef\u53e3\u590d\u7528\u3001bind\u3001listen\u3001accept\u51fd\u6570\u3002</p> <p>TcpConnection\u7c7b\uff1a\u53ea\u8981Acceptor\u8c03\u7528accept\u51fd\u6570\u6709\u6b63\u786e\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u90a3\u4e48\u5c31\u8868\u660e\u4e09\u6b21\u63e1\u624b\u5df2\u7ecf\u5b8c\u5168\u5efa\u7acb\u6210\u529f\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8be5\u8fde\u63a5\u8fdb\u884c\u6570\u636e\u7684\u53d1\u9001\u4e0e\u63a5\u53d7\uff0c\u53d1\u9001\u6570\u636e\u53ef\u4ee5\u5c01\u88c5\u51fd\u6570send\u3001\u63a5\u53d7\u6570\u636e\u53ef\u4ee5\u5c01\u88c5receive\u51fd\u6570\u3002</p> <p>SocketIO\u7c7b\uff1a\u8be5\u7c7b\u7684\u4f5c\u7528\u5c31\u662f\u4e3a\u4e86\u771f\u6b63\u7684\u8fdb\u884c\u6570\u636e\u7684\u6536\u53d1\uff0c\u4e5f\u5c31\u662f\u5e95\u5c42\u4f1a\u8c03\u7528\u76f8\u5e94\u7684\u8bfb\u5199\u6570\u636e\u7684\u51fd\u6570read/recv\u3001write/send\u3002</p>"},{"location":"cppsearch/#2","title":"2\u3001\u7c7b\u56fe\u7684\u8bbe\u8ba1","text":""},{"location":"cppsearch/#3","title":"3\u3001\u5e38\u7528\u51fd\u6570","text":"<pre><code>ssize_t recv(int sockfd, void *buf, size_t len, int flags);\n//\u5982\u679c\u7b2c\u56db\u4e2a\u53c2\u6570flags\u4e3a0\uff0c\u90a3\u4e48recv\u4e0eread\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\u3002\u4f46\u662f\u5982\u679cflags\u4e3aMSG_PEEK\uff0c\u90a3\u4e48\u4f1a\u5c06\u5185\u6838\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u62f7\u8d1d\u51fa\u6765\uff0c\u800c\u4e0d\u4f1a\u79fb\u9664\u3002\n\n#include &lt;sys/socket.h&gt;\nint getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n//\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26sockfd\u83b7\u53d6\u672c\u7aef\u7684\u5730\u5740addr\n\nint getpeername(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n//\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26sockfd\u83b7\u53d6\u5bf9\u7aef\u7684\u5730\u5740addr\n</code></pre>"},{"location":"cppsearch/#reactorv2","title":"\u4e8c\u3001ReactorV2","text":""},{"location":"cppsearch/#1_1","title":"1\u3001\u4f2a\u4ee3\u7801","text":"<pre><code>void EventLoop::loop()\n{\n    _isLooping = true;\n    while(_isLooping)\n    {\n        waitEpollFd();\n    }\n}\n\nvoid EventLoop::uploop()\n{\n    _isLooping = false;\n}\n\nvoid EventLoop::waitEpollFd()\n{\n    nready = epoll_wait();\n    if(-1 == nready &amp;&amp; errno == EINTR )\n    {\n        continue;\n    }\n    else if(-1 == nready)\n    {\n        cerr;\n        return;\n    }\n    else if(0 == nready)\n    {\n        cout &lt;&lt; \"\u8d85\u65f6\" &lt;&lt; endl;\n    }\n    else\n    {\n        for(size_t idx = 0; idx &lt; nready; ++idx)\n        {\n            if(\u6587\u4ef6\u63cf\u8ff0\u7b26 == listenfd)\n            {\n                //\u5904\u7406\u65b0\u7684\u8fde\u63a5\u8bf7\u6c42\n                handleNewConnection();\n            }\n            else\n            {\n                //\u53ef\u4ee5\u8001\u7684\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u7684\u6536\u53d1\n                handleMessage();\n            }\n        }\n    }\n}\n\nvoid EventLoop::handleNewConnection()\n{\n    int connfd = _acceptor.accept();\n\n    //\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26connfd\u653e\u5728\u7ea2\u9ed1\u6811\u4e0a\u8fdb\u884c\u76d1\u542c\n    addEpollReadFd(connfd);\n\n    //\u521b\u5efa\u51fa\u8fde\u63a5\n    TcpConnection con(connfd);\n\n    //\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0e\u8fde\u63a5\u5b58\u653e\u5728map\u4e2d\n    _conns.insert(connfd, TcpConnection);   \n}\n\nvoid EventLoop::handleMessage(int fd)\n{\n    auto it = _conns.find(fd);\n    if(it != _conns.end())\n    {\n        //\u8fde\u63a5\u662f\u5b58\u5728\u7684\n        //\u63a5\u53d7\u6570\u636e\n        msg = it-&gt;second-&gt;receive();\n        //\u53d1\u9001\u6570\u636e\n        it-&gt;second-&gt;send(msg);\n    }\n    else\n    {\n        //\u8fde\u63a5\u662f\u4e0d\u5b58\u5728\u7684\n    }\n}\n</code></pre>"},{"location":"cppsearch/#2_1","title":"2\u3001\u4e09\u4e2a\u534a\u4e8b\u4ef6","text":"<p>TCP\u7f51\u7edc\u7f16\u7a0b\u6700\u672c\u8d28\u7684\u662f\u5904\u7406\u4e09\u4e2a\u534a\u4e8b\u4ef6\uff1a</p> <p>\u8fde\u63a5\u5efa\u7acb\uff1a\u5305\u62ec\u670d\u52a1\u5668\u7aef\u88ab\u52a8\u63a5\u53d7\u8fde\u63a5\uff08accept\uff09\u548c\u5ba2\u6237\u7aef\u4e3b\u52a8\u53d1\u8d77\u8fde\u63a5\uff08connect\uff09\u3002TCP\u8fde\u63a5\u4e00\u65e6\u5efa\u7acb\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5c31\u662f\u5e73\u7b49\u7684\uff0c\u53ef\u4ee5\u5404\u81ea\u6536\u53d1\u6570\u636e\u3002 \u8fde\u63a5\u65ad\u5f00\uff1a\u5305\u62ec\u4e3b\u52a8\u65ad\u5f00\uff08close\u3001shutdown\uff09\u548c\u88ab\u52a8\u65ad\u5f00\uff08read()\u8fd4\u56de0\uff09\u3002 \u6d88\u606f\u5230\u8fbe\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u8bfb\u3002\u8fd9\u662f\u6700\u4e3a\u91cd\u8981\u7684\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u5bf9\u5b83\u7684\u5904\u7406\u65b9\u5f0f\u51b3\u5b9a\u4e86\u7f51\u7edc\u7f16\u7a0b\u7684\u98ce\u683c\uff08\u963b\u585e\u8fd8\u662f\u975e\u963b\u585e\uff0c\u5982\u4f55\u5904\u7406\u5206\u5305\uff0c\u5e94\u7528\u5c42\u7684\u7f13\u51b2\u5982\u4f55\u8bbe\u8ba1\u7b49\u7b49\uff09\u3002 \u6d88\u606f\u53d1\u9001\u5b8c\u6bd5\uff1a\u8fd9\u7b97\u534a\u4e2a\u3002\u5bf9\u4e8e\u4f4e\u6d41\u91cf\u7684\u670d\u52a1\uff0c\u53ef\u4e0d\u5fc5\u5173\u5fc3\u8fd9\u4e2a\u4e8b\u4ef6\uff1b\u53e6\u5916\uff0c\u8fd9\u91cc\u7684\u201c\u53d1\u9001\u5b8c\u6bd5\u201d\u662f\u6307\u6570\u636e\u5199\u5165\u64cd\u4f5c\u7cfb\u7edf\u7f13\u51b2\u533a\uff08\u5185\u6838\u7f13\u51b2\u533a\uff09\uff0c\u5c06\u7531TCP\u534f\u8bae\u6808\u8d1f\u8d23\u6570\u636e\u7684\u53d1\u9001\u4e0e\u91cd\u4f20\uff0c\u4e0d\u4ee3\u8868\u5bf9\u65b9\u5df2\u7ecf\u63a5\u6536\u5230\u6570\u636e\u3002</p>"},{"location":"cppsearch/#3_1","title":"3\u3001\u7c7b\u56fe","text":""},{"location":"cppsearch/#4","title":"4\u3001\u6dfb\u52a0\u4e09\u4e2a\u534a\u4e8b\u4ef6\uff08\u56de\u8c03\uff09","text":"<p>Tcp\u7f51\u7edc\u7f16\u7a0b\u4e2d\u6709\u4e09\u4e2a\u534a\u4e8b\u4ef6\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u5173\u6ce8\u5176\u4e2d\u7684\u524d\u4e09\u4e2a\uff0c\u5373\uff1a\u8fde\u63a5\u5efa\u7acb\u3001\u6d88\u606f\u5230\u8fbe\u3001\u8fde\u63a5\u65ad\u5f00\u3002\u4e09\u4e2a\u4e8b\u4ef6\u90fd\u662f\u4e0e\u8fde\u63a5\u76f8\u5173\u7684\uff0c\u4e5f\u5c31\u662f\u4e0eTcpConnection\u76f8\u5173\uff0c\u8fd9\u4e09\u4e2a\u4e8b\u4ef6\u53ef\u4ee5\u4f7f\u7528\u56de\u8c03\u673a\u5236\u7684\u5f62\u5f0f\u8fdb\u884c\uff0c\u4e5f\u5c31\u662f\u56de\u8c03\u51fd\u6570\u7684\u6ce8\u518c\u4e0e\u56de\u8c03\u51fd\u6570\u7684\u6267\u884c\uff0c\u4f46\u662f\u73b0\u5728TcpConnection\u5bf9\u8c61\u7684\u521b\u5efa\u5728EventLoop\u4e2d\uff0c\u6240\u4ee5\u4e09\u4e2a\u4e8b\u4ef6\u9700\u8981\u5148\u4f20\u9012\u7ed9EventLoop\uff0c\u518d\u4ea4\u7ed9TcpConnection\uff0c\u800c\u5728C++\u4e2d\uff0c\u56de\u8c03\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528bind\u4e0efunction\u7ed3\u5408\u4f7f\u7528\uff0c\u4e5f\u5c31\u662ffunction\u53ef\u4ee5\u7ed1\u5b9a\u51fd\u6570\u7c7b\u578b\uff0c\u800c\u73b0\u5728\u6bcf\u4e2a\u4e8b\u4ef6\u90fd\u4e0e\u8fde\u63a5\u76f8\u5173\uff0c\u6240\u4ee5\u5c31\u662f<code>function&lt;void(const TcpConnectionPtr &amp;)&gt;</code>,\u4e5f\u5c31\u662f\u53ef\u4ee5\u5c06\u5176\u6539\u540d\uff0c<code>using TcpConnectionCallback = function&lt;void(const TcpConnectionPtr &amp;)&gt;</code>.\u7136\u540e\u5c31\u662fEventLoop\u6ce8\u518c\u4e09\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u4e14\u4f5c\u4e3a\u6865\u6881\u4f20\u9012\u7ed9TcpConnection\u5bf9\u8c61\uff0c\u4f46\u662fEventLoop\u4e0d\u4f1a\u6267\u884c\u8be5\u56de\u8c03\u51fd\u6570\uff0c\u56e0\u4e3a\u4e09\u4e2a\u4e8b\u4ef6\u7684\u6267\u884c\u53ea\u4e0eTcpConnection\u8fde\u63a5\u76f8\u5173\uff0c\u4e0eEventLoop\u6ca1\u6709\u5173\u7cfb\u3002\u6700\u540e\u7684\u7ed3\u679c\u662f\uff0c\u5728TcpConnection\u4e0eEventLoop\u90fd\u6ce8\u518c\u4e09\u4e2a\u56de\u8c03\u51fd\u6570\u4e0e\u8bbe\u7f6e\u4e09\u4e2a\u6570\u636e\u6210\u5458\uff0c\u4f46\u662f\u53ea\u6709TcpConnection\u4e2d\u6709\u4e09\u4e2a\u56de\u8c03\u51fd\u6570\u7684\u6267\u884c\u3002</p>"},{"location":"cppsearch/#5","title":"5\u3001\u6838\u5fc3\u4ee3\u7801\u7684\u89e3\u6790","text":""},{"location":"cppsearch/#51eventloop","title":"5.1\u3001EventLoop\u4e2d\u952e\u503c\u5bf9\u5b58\u50a8","text":""},{"location":"cppsearch/#52eventloop","title":"5.2\u3001EventLoop\u4e2d\u4e09\u4e2a\u56de\u8c03\u7684\u5b58\u50a8","text":""},{"location":"cppsearch/#53eventloop","title":"5.3\u3001EventLoop\u4e2d\u4e09\u4e2a\u56de\u8c03\u7684\u6ce8\u518c","text":""},{"location":"cppsearch/#54tcpconnection","title":"5.4\u3001TcpConnection\u4e2d\u4e09\u4e2a\u56de\u8c03\u7684\u5b58\u50a8","text":""},{"location":"cppsearch/#55tcpconnection","title":"5.5\u3001TcpConnection\u4e2d\u4e09\u4e2a\u56de\u8c03\u7684\u6ce8\u518c","text":""},{"location":"cppsearch/#56tcpconnection","title":"5.6\u3001TcpConnection\u4e2d\u4e09\u4e2a\u56de\u8c03\u7684\u6267\u884c","text":""},{"location":"cppsearch/#57eventloopepoll_wait","title":"5.7\u3001EventLoop\u4e2depoll_wait\u53c2\u6570\u95ee\u9898","text":""},{"location":"cppsearch/#58eventloop","title":"5.8\u3001EventLoop\u4e2d\u5904\u7406\u65b0\u7684\u8fde\u63a5\u8bf7\u6c42","text":""},{"location":"cppsearch/#59eventloop","title":"5.9\u3001EventLoop\u4e2d\u8001\u7684\u8fde\u63a5\u4e0a\u6570\u636e\u7684\u6536\u53d1","text":""},{"location":"cppsearch/#6","title":"6\u3001\u4ee3\u7801\u6d41\u7a0b","text":""},{"location":"cppsearch/#reactorv3","title":"\u4e09\u3001ReactorV3","text":""},{"location":"cppsearch/#1_2","title":"1\u3001\u7c7b\u56fe","text":""},{"location":"cppsearch/#eventfd","title":"\u56db\u3001eventfd\u7684\u4f7f\u7528","text":""},{"location":"cppsearch/#1_3","title":"1\u3001\u7279\u70b9","text":"<p>\u5b83\u7684\u4e3b\u8981\u662f\u7528\u4e8e\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u95f4\u901a\u4fe1(\u5982\u901a\u77e5/\u7b49\u5f85\u673a\u5236\u7684\u5b9e\u73b0)\u3002</p>"},{"location":"cppsearch/#2_2","title":"2\u3001\u63a5\u53e3","text":"<pre><code>#include &lt;sys/eventfd.h&gt;\nint eventfd(unsigned int initval, int flags);\n//initval:\u662f\u7531\u5185\u6838\u8ba1\u6570\u5668\u7ef4\u62a4\u7684\u4e00\u4e2a\u521d\u59cb\u503c\u3002\n//flags:\u6807\u5fd7\u4f4d\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a0.\u4e5f\u53ef\u4ee5\u662fEFD_NONBLOCK\u6216EFD_CLOEXEC\n//\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u8fdb\u884c\u8bfb\u5199\u4e0e\u76d1\u542c\uff08IO\u591a\u8def\u590d\u7528\uff09\n</code></pre>"},{"location":"cppsearch/#3_2","title":"3\u3001\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1","text":""}]}